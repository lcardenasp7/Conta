#!/usr/bin/env node

/**
 * SCRIPT DE CORRECCI√ìN: BOT√ìN DE FACTURA DE PROVEEDOR
 * Soluciona el problema del bot√≥n que no ejecuta la funci√≥n
 */

const fs = require('fs');
const path = require('path');

console.log('üîß CORRIGIENDO BOT√ìN DE FACTURA DE PROVEEDOR...\n');

function fixSupplierInvoiceButton() {
    console.log('1Ô∏è‚É£ Modificando bot√≥n para usar event listener...');
    
    const invoicesPath = path.join(__dirname, '../public/js/invoices.js');
    let content = fs.readFileSync(invoicesPath, 'utf8');
    
    // Cambiar el bot√≥n para que use un ID en lugar de onclick
    const oldButton = `<button type="button" class="btn btn-primary" onclick="saveSupplierInvoice()">
                            <i class="bi bi-save"></i> Guardar Factura
                        </button>`;
    
    const newButton = `<button type="button" class="btn btn-primary" id="saveSupplierInvoiceBtn">
                            <i class="bi bi-save"></i> Guardar Factura
                        </button>`;
    
    if (content.includes(oldButton)) {
        content = content.replace(oldButton, newButton);
        console.log('   ‚úÖ Bot√≥n actualizado para usar ID');
    } else {
        console.log('   ‚ö†Ô∏è Bot√≥n ya actualizado o no encontrado');
    }
    
    // Agregar event listener despu√©s de crear el modal
    const insertPoint = content.indexOf('return document.getElementById(\'supplierInvoiceModal\');');
    
    if (insertPoint !== -1) {
        const eventListenerCode = `
    
    // Agregar event listener al bot√≥n de guardar
    const saveBtn = document.getElementById('saveSupplierInvoiceBtn');
    if (saveBtn) {
        saveBtn.addEventListener('click', function() {
            console.log('üîò Bot√≥n de guardar clickeado');
            saveSupplierInvoice();
        });
        console.log('‚úÖ Event listener agregado al bot√≥n de guardar');
    }
    `;
        
        content = content.substring(0, insertPoint) + eventListenerCode + content.substring(insertPoint);
        console.log('   ‚úÖ Event listener agregado');
    }
    
    fs.writeFileSync(invoicesPath, content);
}

function addButtonDebugCode() {
    console.log('2Ô∏è‚É£ Agregando c√≥digo de depuraci√≥n para el bot√≥n...');
    
    const invoicesPath = path.join(__dirname, '../public/js/invoices.js');
    let content = fs.readFileSync(invoicesPath, 'utf8');
    
    // Agregar funci√≥n de prueba del bot√≥n
    const testFunction = `
// Funci√≥n de prueba para el bot√≥n de guardar
function testSupplierInvoiceButton() {
    console.log('üß™ PROBANDO BOT√ìN DE FACTURA DE PROVEEDOR');
    const modal = document.getElementById('supplierInvoiceModal');
    const button = document.getElementById('saveSupplierInvoiceBtn');
    const form = document.getElementById('supplierInvoiceForm');
    
    console.log('Modal encontrado:', !!modal);
    console.log('Bot√≥n encontrado:', !!button);
    console.log('Formulario encontrado:', !!form);
    console.log('Funci√≥n saveSupplierInvoice disponible:', typeof window.saveSupplierInvoice);
    
    if (button) {
        console.log('Simulando click en el bot√≥n...');
        button.click();
    }
}

window.testSupplierInvoiceButton = testSupplierInvoiceButton;
`;
    
    if (!content.includes('function testSupplierInvoiceButton')) {
        content += testFunction;
        fs.writeFileSync(invoicesPath, content);
        console.log('   ‚úÖ Funci√≥n de prueba agregada');
    } else {
        console.log('   ‚úÖ Funci√≥n de prueba ya presente');
    }
}

function generateTestInstructions() {
    console.log('\nüìã INSTRUCCIONES DE PRUEBA:');
    console.log('');
    console.log('1. Reinicia el servidor (Ctrl+C y luego npm start)');
    console.log('2. Ve a http://localhost:3000');
    console.log('3. Inicia sesi√≥n y ve a Facturaci√≥n ‚Üí Facturas');
    console.log('4. Abre las herramientas de desarrollador (F12)');
    console.log('5. Haz clic en "Factura Proveedor"');
    console.log('6. En la consola, ejecuta: testSupplierInvoiceButton()');
    console.log('7. Observa los logs para ver qu√© elementos se encuentran');
    console.log('8. Llena el formulario y prueba el bot√≥n "Guardar Factura"');
    console.log('');
    console.log('üîç LOGS ESPERADOS:');
    console.log('   ‚Ä¢ "üîò Bot√≥n de guardar clickeado"');
    console.log('   ‚Ä¢ "üîç INICIANDO saveSupplierInvoice..."');
    console.log('   ‚Ä¢ "üìã Obteniendo formulario..."');
}

async function main() {
    try {
        fixSupplierInvoiceButton();
        addButtonDebugCode();
        generateTestInstructions();
        
        console.log('\n‚úÖ CORRECCIONES APLICADAS');
        console.log('   ‚Ä¢ Bot√≥n cambiado para usar event listener');
        console.log('   ‚Ä¢ Funci√≥n de prueba agregada');
        console.log('   ‚Ä¢ Logs de depuraci√≥n mejorados');
        
    } catch (error) {
        console.error('‚ùå Error durante las correcciones:', error);
        process.exit(1);
    }
}

if (require.main === module) {
    main();
}

module.exports = { main };