#!/usr/bin/env node

/**
 * SCRIPT DE DEPURACI√ìN: CREACI√ìN DE FACTURA EXTERNA
 * Identifica por qu√© falla la creaci√≥n de facturas externas
 */

console.log('üîç DEPURANDO CREACI√ìN DE FACTURA EXTERNA...\n');

const fs = require('fs');
const path = require('path');

function checkInvoiceRoutes() {
    console.log('1Ô∏è‚É£ Verificando rutas de facturas...');
    
    const routesPath = path.join(__dirname, '../routes/invoice.routes.js');
    
    if (!fs.existsSync(routesPath)) {
        console.log('   ‚ùå Archivo de rutas de facturas no encontrado');
        return false;
    }
    
    const content = fs.readFileSync(routesPath, 'utf8');
    
    const checks = [
        {
            name: 'Ruta POST /api/invoices existe',
            test: content.includes('router.post(') && content.includes('/invoices')
        },
        {
            name: 'Manejo de facturas externas',
            test: content.includes('isExternal') || content.includes('external')
        },
        {
            name: 'Validaci√≥n de datos',
            test: content.includes('clientName') || content.includes('client')
        }
    ];
    
    checks.forEach(check => {
        if (check.test) {
            console.log(`   ‚úÖ ${check.name}`);
        } else {
            console.log(`   ‚ùå ${check.name}`);
        }
    });
    
    return checks.every(check => check.test);
}

function addExternalInvoiceDebugging() {
    console.log('\n2Ô∏è‚É£ Agregando depuraci√≥n a factura externa...');
    
    const invoicesPath = path.join(__dirname, '../public/js/invoices.js');
    let content = fs.readFileSync(invoicesPath, 'utf8');
    
    // Agregar funci√≥n de prueba para datos de factura externa
    const testFunction = `
// Funci√≥n de prueba para datos de factura externa
function testExternalInvoiceData() {
    console.log('üß™ PROBANDO DATOS DE FACTURA EXTERNA');
    
    const testData = {
        clientName: "Cliente Test",
        clientDocument: "12345678",
        clientEmail: "test@test.com",
        concept: "UNIFORM",
        dueDate: "2025-09-17",
        observations: "Test",
        fundId: "test-fund-id",
        items: [
            {
                description: "Producto test",
                quantity: 1,
                unitPrice: 50000
            }
        ],
        isExternal: true,
        type: 'OUTGOING',
        subtotal: 50000,
        tax: 0,
        total: 50000
    };
    
    console.log('Datos de prueba:', testData);
    
    // Validar estructura
    const requiredFields = ['clientName', 'clientDocument', 'concept', 'items', 'total'];
    const missingFields = requiredFields.filter(field => !testData[field]);
    
    if (missingFields.length > 0) {
        console.log('‚ùå Campos faltantes:', missingFields);
    } else {
        console.log('‚úÖ Todos los campos requeridos presentes');
    }
    
    // Validar items
    if (testData.items && testData.items.length > 0) {
        const itemFields = ['description', 'quantity', 'unitPrice'];
        testData.items.forEach((item, index) => {
            const missingItemFields = itemFields.filter(field => !item[field]);
            if (missingItemFields.length > 0) {
                console.log(\`‚ùå Item \${index + 1} campos faltantes:\`, missingItemFields);
            } else {
                console.log(\`‚úÖ Item \${index + 1} v√°lido\`);
            }
        });
    }
    
    return testData;
}

window.testExternalInvoiceData = testExternalInvoiceData;
`;
    
    if (!content.includes('function testExternalInvoiceData')) {
        content += testFunction;
        fs.writeFileSync(invoicesPath, content);
        console.log('   ‚úÖ Funci√≥n de prueba agregada');
    } else {
        console.log('   ‚úÖ Funci√≥n de prueba ya presente');
    }
}

function generateTestInstructions() {
    console.log('\nüìã INSTRUCCIONES DE DEPURACI√ìN:');
    console.log('');
    console.log('1. Reinicia el servidor si no est√° corriendo');
    console.log('2. Ve a http://localhost:3000 e inicia sesi√≥n');
    console.log('3. Ve a Facturaci√≥n ‚Üí Facturas');
    console.log('4. Abre las herramientas de desarrollador (F12)');
    console.log('5. En la consola, ejecuta: testExternalInvoiceData()');
    console.log('6. Verifica que los datos de prueba sean v√°lidos');
    console.log('7. Intenta crear una factura externa');
    console.log('8. Observa los logs detallados en la consola');
    console.log('');
    console.log('üîç LOGS ESPERADOS:');
    console.log('   ‚Ä¢ "üíæ Procesando factura externa con fondo: [fund-id]"');
    console.log('   ‚Ä¢ "üíæ Creando factura externa..." + datos');
    console.log('   ‚Ä¢ "‚úÖ Factura externa creada:" + respuesta');
    console.log('');
    console.log('‚ùå SI VES ERROR 500:');
    console.log('   ‚Ä¢ Revisa los logs del servidor en la terminal');
    console.log('   ‚Ä¢ Verifica que todos los campos requeridos est√©n presentes');
    console.log('   ‚Ä¢ Comprueba que la estructura de datos sea correcta');
    console.log('');
    console.log('üîß PARA REVISAR LOGS DEL SERVIDOR:');
    console.log('   ‚Ä¢ Ve a la terminal donde corre el servidor');
    console.log('   ‚Ä¢ Busca errores despu√©s de intentar crear la factura');
    console.log('   ‚Ä¢ Reporta el error exacto que aparece');
}

async function main() {
    try {
        const routesOk = checkInvoiceRoutes();
        addExternalInvoiceDebugging();
        generateTestInstructions();
        
        console.log('\nüìä RESUMEN:');
        console.log(`   Rutas de facturas: ${routesOk ? '‚úÖ' : '‚ùå'}`);
        console.log('   Funci√≥n de prueba: ‚úÖ');
        console.log('   Logs de depuraci√≥n: ‚úÖ');
        
        if (!routesOk) {
            console.log('\n‚ö†Ô∏è PROBLEMA DETECTADO:');
            console.log('   Las rutas de facturas pueden no estar configuradas correctamente');
            console.log('   Revisa el archivo routes/invoice.routes.js');
        }
        
    } catch (error) {
        console.error('‚ùå Error durante la depuraci√≥n:', error);
        process.exit(1);
    }
}

if (require.main === module) {
    main();
}

module.exports = { main };