const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanFundsTestData() {
    console.log('üßπ Limpiando datos de prueba de fondos...');
    
    try {
        // 1. Eliminar todas las alertas de fondos
        console.log('üìù Eliminando alertas de fondos...');
        const alertsCount = await prisma.fundAlert.count();
        if (alertsCount > 0) {
            await prisma.fundAlert.deleteMany({});
            console.log(`‚úÖ ${alertsCount} alertas de fondos eliminadas`);
        } else {
            console.log('‚ÑπÔ∏è No hay alertas de fondos para eliminar');
        }

        // 2. Eliminar todas las transacciones de fondos
        console.log('üìù Eliminando transacciones de fondos...');
        const transactionsCount = await prisma.fundTransaction.count();
        if (transactionsCount > 0) {
            await prisma.fundTransaction.deleteMany({});
            console.log(`‚úÖ ${transactionsCount} transacciones de fondos eliminadas`);
        } else {
            console.log('‚ÑπÔ∏è No hay transacciones de fondos para eliminar');
        }

        // 3. Eliminar todos los pr√©stamos entre fondos
        console.log('üìù Eliminando pr√©stamos entre fondos...');
        const loansCount = await prisma.fundLoan.count();
        if (loansCount > 0) {
            await prisma.fundLoan.deleteMany({});
            console.log(`‚úÖ ${loansCount} pr√©stamos entre fondos eliminados`);
        } else {
            console.log('‚ÑπÔ∏è No hay pr√©stamos entre fondos para eliminar');
        }

        // 4. Eliminar todos los fondos
        console.log('üìù Eliminando todos los fondos...');
        const fundsCount = await prisma.fund.count();
        if (fundsCount > 0) {
            await prisma.fund.deleteMany({});
            console.log(`‚úÖ ${fundsCount} fondos eliminados`);
        } else {
            console.log('‚ÑπÔ∏è No hay fondos para eliminar');
        }

        // 5. Verificar que todo est√© limpio
        console.log('\nüìä Verificando limpieza...');
        const remainingFunds = await prisma.fund.count();
        const remainingTransactions = await prisma.fundTransaction.count();
        const remainingLoans = await prisma.fundLoan.count();
        const remainingAlerts = await prisma.fundAlert.count();

        console.log(`üìä Fondos restantes: ${remainingFunds}`);
        console.log(`üìä Transacciones restantes: ${remainingTransactions}`);
        console.log(`üìä Pr√©stamos restantes: ${remainingLoans}`);
        console.log(`üìä Alertas restantes: ${remainingAlerts}`);

        if (remainingFunds === 0 && remainingTransactions === 0 && remainingLoans === 0 && remainingAlerts === 0) {
            console.log('\nüéâ ¬°Limpieza completada exitosamente!');
            console.log('‚úÖ Todos los datos de prueba de fondos han sido eliminados');
            console.log('‚úÖ El sistema est√° listo para datos reales de producci√≥n');
        } else {
            console.log('\n‚ö†Ô∏è Algunos datos no fueron eliminados completamente');
        }

        return {
            success: true,
            fundsDeleted: fundsCount,
            transactionsDeleted: transactionsCount,
            loansDeleted: loansCount,
            alertsDeleted: alertsCount
        };

    } catch (error) {
        console.error('‚ùå Error durante la limpieza:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    cleanFundsTestData()
        .then((result) => {
            console.log('\n‚úÖ Script completado exitosamente');
            console.log('üìä Resultado:', result);
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Error fatal:', error);
            process.exit(1);
        });
}

module.exports = { cleanFundsTestData };