#!/usr/bin/env node

/**
 * Script para probar los endpoints de instituci√≥n
 */

const fetch = require('node-fetch');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

const BASE_URL = 'http://localhost:3000/api';

async function testInstitutionEndpoints() {
    console.log('üèõÔ∏è  Probando endpoints de instituci√≥n...\n');

    const token = process.argv[2];
    
    if (!token) {
        console.log('‚ùå No se proporcion√≥ token. Uso: node test-institution-api.js <token>');
        console.log('   Obt√©n el token desde las herramientas de desarrollador > Application > Local Storage');
        return;
    }

    const headers = {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
    };

    try {
        // Test 1: Get institution data
        console.log('üìã 1. Probando GET /institution...');
        const getResponse = await fetch(`${BASE_URL}/institution`, { headers });
        
        if (getResponse.ok) {
            const institution = await getResponse.json();
            console.log('‚úÖ GET institution OK');
            console.log(`   - Nombre: ${institution.name || 'No definido'}`);
            console.log(`   - NIT: ${institution.nit || 'No definido'}`);
            console.log(`   - Logo: ${institution.logo ? 'S√≠' : 'No'}`);
        } else if (getResponse.status === 404) {
            console.log('‚ö†Ô∏è  No hay datos institucionales (normal en primera ejecuci√≥n)');
        } else {
            console.log(`‚ùå GET institution fall√≥: ${getResponse.status} ${getResponse.statusText}`);
        }

        // Test 2: Create/Update institution data
        console.log('\nüíæ 2. Probando POST /institution...');
        const testData = {
            name: 'Instituci√≥n Educativa de Prueba',
            nit: '123456789-0',
            address: 'Calle 123 #45-67',
            city: 'Bogot√°',
            state: 'Cundinamarca',
            locality: 'Localidad de Prueba',
            phone: '601-2345678',
            email: 'info@institucion.edu.co',
            dane: '111001000001',
            resolution: 'Resoluci√≥n 001 de 2024',
            levels: 'Preescolar, B√°sica, Media',
            title: 'Bachiller Acad√©mico',
            calendar: 'A',
            schedule: 'Completa'
        };

        const postResponse = await fetch(`${BASE_URL}/institution`, {
            method: 'POST',
            headers,
            body: JSON.stringify(testData)
        });

        if (postResponse.ok) {
            const result = await postResponse.json();
            console.log('‚úÖ POST institution OK');
            console.log(`   - ID: ${result.id}`);
            console.log(`   - Nombre: ${result.name}`);
        } else {
            console.log(`‚ùå POST institution fall√≥: ${postResponse.status} ${postResponse.statusText}`);
            const error = await postResponse.text();
            console.log(`   Error: ${error}`);
        }

        // Test 3: Logo endpoints (without actual file)
        console.log('\nüñºÔ∏è  3. Probando endpoints de logo...');
        
        // Test logo GET (should return 404 if no logo)
        const logoGetResponse = await fetch(`${BASE_URL}/institution/logo`);
        if (logoGetResponse.status === 404) {
            console.log('‚úÖ GET logo endpoint OK (sin logo configurado)');
        } else if (logoGetResponse.ok) {
            console.log('‚úÖ GET logo endpoint OK (logo existente)');
        } else {
            console.log(`‚ùå GET logo fall√≥: ${logoGetResponse.status}`);
        }

        console.log('\nüìù Resumen de pruebas:');
        console.log('   ‚Ä¢ Endpoint GET /institution: Disponible');
        console.log('   ‚Ä¢ Endpoint POST /institution: Disponible');
        console.log('   ‚Ä¢ Endpoint GET /institution/logo: Disponible');
        console.log('   ‚Ä¢ Endpoint POST /institution/logo: Disponible (requiere archivo)');
        console.log('   ‚Ä¢ Endpoint DELETE /institution/logo: Disponible');

        console.log('\nüí° Para probar carga de logo:');
        console.log('   1. Ve a la interfaz web');
        console.log('   2. Configuraci√≥n ‚Üí Instituci√≥n');
        console.log('   3. Usa el bot√≥n "Cargar Logo"');

    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error.message);
    }
}

// Test basic server connection
async function testServerConnection() {
    try {
        console.log('üîå Probando conexi√≥n al servidor...');
        const response = await fetch(`${BASE_URL.replace('/api', '')}/health`);
        
        if (response.ok) {
            console.log('‚úÖ Servidor conectado');
            return true;
        } else {
            console.log(`‚ùå Servidor responde con error: ${response.status}`);
            return false;
        }
    } catch (error) {
        console.error('‚ùå No se puede conectar al servidor:', error.message);
        console.log('   Aseg√∫rate de que el servidor est√© ejecut√°ndose en http://localhost:3000');
        return false;
    }
}

// Run tests
async function runTests() {
    const connected = await testServerConnection();
    if (connected) {
        console.log('');
        await testInstitutionEndpoints();
    }
}

runTests();