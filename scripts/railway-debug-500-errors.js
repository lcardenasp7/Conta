#!/usr/bin/env node

/**
 * Script para diagnosticar errores 500 en Railway
 */

require('dotenv').config();
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugRailwayErrors() {
    console.log('üîç DIAGNOSTICANDO ERRORES 500 EN RAILWAY');
    console.log('========================================\n');

    try {
        // 1. Verificar conexi√≥n a base de datos
        console.log('üìã 1. VERIFICANDO CONEXI√ìN A BASE DE DATOS...');
        
        await prisma.$connect();
        console.log('‚úÖ Conexi√≥n a base de datos exitosa');
        
        // 2. Verificar tablas cr√≠ticas
        console.log('\nüìã 2. VERIFICANDO TABLAS CR√çTICAS...');
        
        const tables = [
            { name: 'Event', model: prisma.event },
            { name: 'Invoice', model: prisma.invoice },
            { name: 'Payment', model: prisma.payment },
            { name: 'Student', model: prisma.student },
            { name: 'User', model: prisma.user },
            { name: 'Fund', model: prisma.fund }
        ];
        
        for (const table of tables) {
            try {
                const count = await table.model.count();
                console.log(`‚úÖ ${table.name}: ${count} registros`);
            } catch (error) {
                console.log(`‚ùå ${table.name}: Error - ${error.message}`);
            }
        }
        
        // 3. Verificar relaciones problem√°ticas
        console.log('\nüìã 3. VERIFICANDO RELACIONES...');
        
        // Verificar eventos con usuarios
        try {
            const eventsWithUsers = await prisma.event.findMany({
                include: { user: true },
                take: 5
            });
            console.log(`‚úÖ Eventos con usuarios: ${eventsWithUsers.length}`);
        } catch (error) {
            console.log(`‚ùå Eventos con usuarios: ${error.message}`);
        }
        
        // Verificar facturas con estudiantes
        try {
            const invoicesWithStudents = await prisma.invoice.findMany({
                include: { student: true },
                take: 5
            });
            console.log(`‚úÖ Facturas con estudiantes: ${invoicesWithStudents.length}`);
        } catch (error) {
            console.log(`‚ùå Facturas con estudiantes: ${error.message}`);
        }
        
        // Verificar pagos con facturas
        try {
            const paymentsWithInvoices = await prisma.payment.findMany({
                include: { invoice: true },
                take: 5
            });
            console.log(`‚úÖ Pagos con facturas: ${paymentsWithInvoices.length}`);
        } catch (error) {
            console.log(`‚ùå Pagos con facturas: ${error.message}`);
        }
        
        // 4. Verificar datos inconsistentes
        console.log('\nüìã 4. VERIFICANDO INCONSISTENCIAS...');
        
        // Facturas sin estudiante v√°lido
        try {
            const orphanInvoices = await prisma.invoice.findMany({
                where: {
                    student: null
                }
            });
            if (orphanInvoices.length > 0) {
                console.log(`‚ö†Ô∏è Facturas hu√©rfanas: ${orphanInvoices.length}`);
            } else {
                console.log('‚úÖ No hay facturas hu√©rfanas');
            }
        } catch (error) {
            console.log(`‚ùå Error verificando facturas hu√©rfanas: ${error.message}`);
        }
        
        // Pagos sin factura v√°lida
        try {
            const orphanPayments = await prisma.payment.findMany({
                where: {
                    invoice: null
                }
            });
            if (orphanPayments.length > 0) {
                console.log(`‚ö†Ô∏è Pagos hu√©rfanos: ${orphanPayments.length}`);
            } else {
                console.log('‚úÖ No hay pagos hu√©rfanos');
            }
        } catch (error) {
            console.log(`‚ùå Error verificando pagos hu√©rfanos: ${error.message}`);
        }
        
        // 5. Verificar esquema de base de datos
        console.log('\nüìã 5. VERIFICANDO ESQUEMA...');
        
        try {
            // Verificar que las columnas cr√≠ticas existen
            const sampleEvent = await prisma.event.findFirst();
            const sampleInvoice = await prisma.invoice.findFirst();
            const samplePayment = await prisma.payment.findFirst();
            
            console.log('‚úÖ Esquema de Event parece correcto');
            console.log('‚úÖ Esquema de Invoice parece correcto');
            console.log('‚úÖ Esquema de Payment parece correcto');
        } catch (error) {
            console.log(`‚ùå Error en esquema: ${error.message}`);
        }
        
        console.log('\nüìã RECOMENDACIONES:');
        console.log('==================');
        console.log('1. üßπ Ejecutar limpieza: railway run node scripts/railway-clean-production.js');
        console.log('2. üîÑ Reiniciar servicio en Railway');
        console.log('3. üìä Verificar logs de Railway para errores espec√≠ficos');
        console.log('4. üîç Probar endpoints individualmente');
        
    } catch (error) {
        console.error('‚ùå Error durante diagn√≥stico:', error);
        
        console.log('\nüö® POSIBLES CAUSAS:');
        console.log('==================');
        console.log('1. Base de datos no migrada correctamente');
        console.log('2. Variables de entorno incorrectas');
        console.log('3. Datos inconsistentes en la base de datos');
        console.log('4. Problemas de conexi√≥n a PostgreSQL');
        console.log('5. Esquema de Prisma desactualizado');
        
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    debugRailwayErrors()
        .then(() => {
            console.log('\n‚úÖ Diagn√≥stico completado');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Error:', error);
            process.exit(1);
        });
}

module.exports = { debugRailwayErrors };