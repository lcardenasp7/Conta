/**
 * Script final para reiniciar el servidor y verificar que las correcciones funcionen
 */

const { spawn, exec } = require('child_process');
const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function finalRestartAndVerify() {
    try {
        console.log('üîÑ Reinicio final y verificaci√≥n de correcciones...\n');

        // 1. Verificar estado de las correcciones
        console.log('üîç Verificando estado de las correcciones...');
        
        const serviceCode = fs.readFileSync(path.join(__dirname, '../services/invoice-generator.service.js'), 'utf8');
        const routeCode = fs.readFileSync(path.join(__dirname, '../routes/invoice.routes.js'), 'utf8');
        
        const corrections = {
            'Servicio - Divisi√≥n por palabras': serviceCode.includes('words.length > 3'),
            'Servicio - Tama√±o 9pt': serviceCode.includes('fontSize(9)'),
            'Servicio - Direcci√≥n espec√≠fica': serviceCode.includes('Dg. 136 #9D - 60, Suroccidente, Barranquilla'),
            'Servicio - Espaciado Y+26': serviceCode.includes('startY + 26'),
            'Endpoint - Usa servicio': routeCode.includes('generateInvoicePDFBuffer'),
            'Endpoint - No manual': !routeCode.includes('new PDFDocument') || routeCode.indexOf('generateInvoicePDFBuffer') < routeCode.indexOf('new PDFDocument')
        };

        console.log('\nüìã Estado de correcciones:');
        Object.entries(corrections).forEach(([correction, applied]) => {
            console.log(`   ${applied ? '‚úÖ' : '‚ùå'} ${correction}`);
        });

        const allCorrectionsApplied = Object.values(corrections).every(Boolean);

        if (!allCorrectionsApplied) {
            throw new Error('No todas las correcciones est√°n aplicadas');
        }

        console.log('\nüéâ ¬°Todas las correcciones est√°n aplicadas!');

        // 2. Generar PDF de prueba final
        console.log('\nüìÑ Generando PDF de prueba final...');
        
        const invoice = await prisma.invoice.findFirst({
            select: { id: true, invoiceNumber: true }
        });

        if (!invoice) {
            throw new Error('No hay facturas para probar');
        }

        // Limpiar cach√©
        const servicePath = path.resolve(__dirname, '../services/invoice-generator.service.js');
        delete require.cache[servicePath];
        
        const invoiceService = require('../services/invoice-generator.service.js');
        const pdfBuffer = await invoiceService.generateInvoicePDFBuffer(invoice.id);
        
        const fileName = `final-verification-${Date.now()}.pdf`;
        const filePath = path.join(__dirname, fileName);
        
        fs.writeFileSync(filePath, pdfBuffer);
        
        console.log(`‚úÖ PDF final generado: ${fileName}`);
        console.log(`üìä Tama√±o: ${(pdfBuffer.length / 1024).toFixed(2)} KB`);

        // 3. Mostrar resumen
        console.log('\nüìã Resumen de correcciones aplicadas:');
        console.log('   ‚úÖ Nombre de instituci√≥n dividido en m√∫ltiples l√≠neas');
        console.log('   ‚úÖ Tama√±o de fuente reducido a 9pt');
        console.log('   ‚úÖ Direcci√≥n espec√≠fica agregada');
        console.log('   ‚úÖ Espaciado mejorado entre elementos');
        console.log('   ‚úÖ Endpoint corregido para usar el servicio');

        // 4. Instrucciones finales
        console.log('\nüéØ INSTRUCCIONES FINALES:');
        console.log('   1. üõë DET√âN el servidor actual (Ctrl+C)');
        console.log('   2. üöÄ EJECUTA: node server.js');
        console.log('   3. üåê Ve a la interfaz web');
        console.log('   4. üìÑ Crea o descarga una factura');
        console.log('   5. ‚úÖ Verifica que el header est√© corregido');

        console.log('\nüí° Si el problema persiste:');
        console.log('   - Limpia cach√© del navegador (Ctrl+Shift+R)');
        console.log('   - Verifica que no hay otros procesos de Node.js');
        console.log('   - Revisa la consola del servidor por errores');

        return {
            success: true,
            allCorrectionsApplied,
            pdfPath: filePath,
            invoiceNumber: invoice.invoiceNumber
        };

    } catch (error) {
        console.error('‚ùå Error:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    finalRestartAndVerify()
        .then(result => {
            console.log('\nüéâ VERIFICACI√ìN COMPLETADA EXITOSAMENTE');
            console.log('üîÑ Ahora reinicia el servidor para aplicar todos los cambios');
            process.exit(0);
        })
        .catch(error => {
            console.error('\n‚ùå Error en la verificaci√≥n final:', error.message);
            process.exit(1);
        });
}

module.exports = { finalRestartAndVerify };