/**
 * RUTAS DE PR√âSTAMOS ENTRE FONDOS
 * Sistema completo de pr√©stamos con aprobaci√≥n autom√°tica/manual
 * Autor: Sistema de Trazabilidad VSP
 * Fecha: 2024-01-15
 */

const express = require('express');
const { body, validationResult, query } = require('express-validator');
const { PrismaClient } = require('@prisma/client');
const { 
  authenticateToken, 
  canManageAccounting, 
  canApproveLargeLoans,
  canManageFundTransfers,
  isRector 
} = require('../middleware/auth.middleware');

const router = express.Router();
const prisma = new PrismaClient();

// ==========================================
// GESTI√ìN B√ÅSICA DE PR√âSTAMOS
// ==========================================

// Obtener todos los pr√©stamos con filtros
router.get('/', authenticateToken, async (req, res) => {
  try {
    console.log('üìã GET /api/fund-loans - Obteniendo pr√©stamos');
    
    const { 
      status,
      lenderFundId,
      borrowerFundId,
      requestedBy,
      overdue = 'false',
      page = 1,
      limit = 20
    } = req.query;

    let where = {};

    // Filtros
    if (status) {
      where.status = { in: status.split(',') };
    }

    if (lenderFundId) {
      where.lenderFundId = lenderFundId;
    }

    if (borrowerFundId) {
      where.borrowerFundId = borrowerFundId;
    }

    if (requestedBy) {
      where.requestedBy = requestedBy;
    }

    // Filtro de vencidos
    if (overdue === 'true') {
      where.dueDate = { lt: new Date() };
      where.status = { in: ['DISBURSED', 'REPAYING'] };
    }

    const [loans, total] = await Promise.all([
      prisma.fundLoan.findMany({
        where,
        include: {
          lenderFund: { select: { id: true, name: true, code: true, currentBalance: true } },
          borrowerFund: { select: { id: true, name: true, code: true, currentBalance: true } },
          requester: { select: { id: true, name: true, role: true } },
          approver: { select: { id: true, name: true, role: true } },
          transactions: {
            include: {
              user: { select: { name: true } }
            },
            orderBy: { createdAt: 'desc' }
          }
        },
        orderBy: { requestDate: 'desc' },
        skip: (parseInt(page) - 1) * parseInt(limit),
        take: parseInt(limit)
      }),
      prisma.fundLoan.count({ where })
    ]);

    // Calcular informaci√≥n adicional
    const loansWithDetails = loans.map(loan => {
      const today = new Date();
      const dueDate = new Date(loan.dueDate);
      const daysUntilDue = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));
      
      return {
        ...loan,
        isOverdue: daysUntilDue < 0 && ['DISBURSED', 'REPAYING'].includes(loan.status),
        daysUntilDue,
        isNearDue: daysUntilDue >= 0 && daysUntilDue <= 7,
        requiresApproval: loan.amount >= 1000000,
        paymentProgress: loan.amount > 0 ? Math.round((loan.totalRepaid / loan.amount) * 100) : 0
      };
    });

    console.log(`‚úÖ Obtenidos ${loansWithDetails.length} pr√©stamos`);
    res.json({
      success: true,
      loans: loansWithDetails,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / parseInt(limit))
      }
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo pr√©stamos:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al obtener pr√©stamos',
      details: error.message 
    });
  }
});

// Obtener pr√©stamo espec√≠fico
router.get('/:id', authenticateToken, async (req, res) => {
  try {
    console.log('üîç GET /api/fund-loans/:id - Obteniendo pr√©stamo:', req.params.id);
    
    const loanId = req.params.id;

    const loan = await prisma.fundLoan.findUnique({
      where: { id: loanId },
      include: {
        lenderFund: { 
          select: { 
            id: true, 
            name: true, 
            code: true, 
            currentBalance: true,
            type: true 
          } 
        },
        borrowerFund: { 
          select: { 
            id: true, 
            name: true, 
            code: true, 
            currentBalance: true,
            type: true 
          } 
        },
        requester: { select: { id: true, name: true, role: true, email: true } },
        approver: { select: { id: true, name: true, role: true, email: true } },
        transactions: {
          include: {
            user: { select: { name: true } },
            fund: { select: { name: true } }
          },
          orderBy: { createdAt: 'desc' }
        }
      }
    });

    if (!loan) {
      return res.status(404).json({
        success: false,
        error: 'Pr√©stamo no encontrado'
      });
    }

    // Calcular detalles adicionales
    const today = new Date();
    const dueDate = new Date(loan.dueDate);
    const requestDate = new Date(loan.requestDate);
    const daysUntilDue = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));
    const daysSinceRequest = Math.ceil((today - requestDate) / (1000 * 60 * 60 * 24));

    const loanWithDetails = {
      ...loan,
      isOverdue: daysUntilDue < 0 && ['DISBURSED', 'REPAYING'].includes(loan.status),
      daysUntilDue,
      daysSinceRequest,
      isNearDue: daysUntilDue >= 0 && daysUntilDue <= 7,
      requiresApproval: loan.amount >= 1000000,
      paymentProgress: loan.amount > 0 ? Math.round((loan.totalRepaid / loan.amount) * 100) : 0,
      canUserApprove: req.user.role === 'RECTOR' || req.user.role === 'ADMIN',
      canUserEdit: loan.status === 'PENDING' && (loan.requestedBy === req.user.id || ['RECTOR', 'ADMIN'].includes(req.user.role))
    };

    console.log('‚úÖ Pr√©stamo obtenido con detalles completos');
    res.json({
      success: true,
      loan: loanWithDetails
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo pr√©stamo:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al obtener pr√©stamo',
      details: error.message 
    });
  }
});

// Crear solicitud de pr√©stamo
router.post('/', authenticateToken, canManageAccounting, [
  body('lenderFundId').isUUID().withMessage('ID de fondo prestamista inv√°lido'),
  body('borrowerFundId').isUUID().withMessage('ID de fondo receptor inv√°lido'),
  body('amount').isFloat({ min: 1 }).withMessage('Monto debe ser mayor a 0'),
  body('reason').isLength({ min: 10 }).withMessage('Raz√≥n debe tener al menos 10 caracteres'),
  body('dueDate').isISO8601().withMessage('Fecha de vencimiento inv√°lida')
], async (req, res) => {
  try {
    console.log('üìù POST /api/fund-loans - Creando solicitud de pr√©stamo');
    
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Errores de validaci√≥n',
        details: errors.array()
      });
    }

    const { lenderFundId, borrowerFundId, amount, reason, dueDate, observations } = req.body;

    // Validaciones de negocio
    if (lenderFundId === borrowerFundId) {
      return res.status(400).json({
        success: false,
        error: 'El fondo prestamista y receptor no pueden ser el mismo'
      });
    }

    // Verificar que la fecha de vencimiento sea futura
    const parsedDueDate = new Date(dueDate);
    const minDate = new Date();
    minDate.setDate(minDate.getDate() + 7); // M√≠nimo 7 d√≠as

    if (parsedDueDate < minDate) {
      return res.status(400).json({
        success: false,
        error: 'La fecha de vencimiento debe ser al menos 7 d√≠as en el futuro'
      });
    }

    // Verificar fondos existen y est√°n activos
    const [lenderFund, borrowerFund] = await Promise.all([
      prisma.fund.findUnique({ where: { id: lenderFundId } }),
      prisma.fund.findUnique({ where: { id: borrowerFundId } })
    ]);

    if (!lenderFund || !borrowerFund) {
      return res.status(404).json({
        success: false,
        error: 'Uno o ambos fondos no existen'
      });
    }

    if (!lenderFund.isActive || !borrowerFund.isActive) {
      return res.status(400).json({
        success: false,
        error: 'Uno o ambos fondos no est√°n activos'
      });
    }

    // Validar capacidad de pr√©stamo (30% del saldo)
    const maxLoanAmount = Math.floor(lenderFund.currentBalance * 0.30);
    
    if (amount > maxLoanAmount) {
      return res.status(400).json({
        success: false,
        error: `El monto excede el l√≠mite de pr√©stamo del fondo (30% del saldo). M√°ximo permitido: $${maxLoanAmount.toLocaleString()}`
      });
    }

    if (lenderFund.currentBalance < amount) {
      return res.status(400).json({
        success: false,
        error: `Saldo insuficiente en ${lenderFund.name}. Disponible: $${lenderFund.currentBalance.toLocaleString()}`
      });
    }

    // Determinar si requiere aprobaci√≥n del rector
    const requiresRectorApproval = amount >= 1000000;
    const canAutoApprove = !requiresRectorApproval;
    const userCanApprove = ['RECTOR', 'ADMIN'].includes(req.user.role);

    const result = await prisma.$transaction(async (tx) => {
      // Crear solicitud de pr√©stamo
      const loan = await tx.fundLoan.create({
        data: {
          lenderFundId,
          borrowerFundId,
          amount,
          reason,
          dueDate: parsedDueDate,
          observations,
          requestedBy: req.user.id,
          pendingAmount: amount,
          status: canAutoApprove || userCanApprove ? 'APPROVED' : 'PENDING',
          ...(canAutoApprove || userCanApprove ? {
            approvedBy: req.user.id,
            approvalDate: new Date()
          } : {})
        }
      });

      // Si se aprueba autom√°ticamente, proceder con el desembolso
      if (canAutoApprove || userCanApprove) {
        console.log('üí∞ Aprobaci√≥n autom√°tica - Desembolsando pr√©stamo');
        
        // Registrar transacci√≥n de salida (fondo prestamista)
        const outTransaction = await tx.fundTransaction.create({
          data: {
            fundId: lenderFundId,
            type: 'LOAN_DISBURSED',
            amount,
            description: `Pr√©stamo otorgado a ${borrowerFund.name}: ${reason}`,
            userId: req.user.id,
            performedBy: req.user.id,
            fundLoanId: loan.id,
            balanceAfter: lenderFund.currentBalance - amount,
            isApproved: true
          }
        });

        // Registrar transacci√≥n de entrada (fondo receptor)
        const inTransaction = await tx.fundTransaction.create({
          data: {
            fundId: borrowerFundId,
            type: 'LOAN_RECEIVED',
            amount,
            description: `Pr√©stamo recibido de ${lenderFund.name}: ${reason}`,
            userId: req.user.id,
            performedBy: req.user.id,
            fundLoanId: loan.id,
            balanceAfter: borrowerFund.currentBalance + amount,
            isApproved: true
          }
        });

        // Actualizar saldos de los fondos
        await Promise.all([
          tx.fund.update({
            where: { id: lenderFundId },
            data: {
              currentBalance: { decrement: amount },
              totalExpenses: { increment: amount },
              balance: { decrement: amount }
            }
          }),
          tx.fund.update({
            where: { id: borrowerFundId },
            data: {
              currentBalance: { increment: amount },
              totalIncome: { increment: amount },
              balance: { increment: amount }
            }
          })
        ]);

        // Actualizar estado del pr√©stamo a DISBURSED
        await tx.fundLoan.update({
          where: { id: loan.id },
          data: { status: 'DISBURSED' }
        });

        return { loan, outTransaction, inTransaction, autoApproved: true };
      }

      return { loan, autoApproved: false };
    });

    const message = result.autoApproved 
      ? 'Pr√©stamo aprobado y desembolsado autom√°ticamente'
      : requiresRectorApproval 
        ? 'Solicitud creada. Requiere aprobaci√≥n del rector (monto ‚â• $1,000,000)'
        : 'Solicitud de pr√©stamo creada exitosamente';

    console.log('‚úÖ Solicitud de pr√©stamo procesada');
    res.status(201).json({
      success: true,
      loan: result.loan,
      autoApproved: result.autoApproved,
      requiresRectorApproval,
      message
    });

  } catch (error) {
    console.error('‚ùå Error creando solicitud:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al crear solicitud de pr√©stamo',
      details: error.message 
    });
  }
});

// ==========================================
// GESTI√ìN DE APROBACIONES
// ==========================================

// Obtener pr√©stamos pendientes de aprobaci√≥n
router.get('/pending-approvals', authenticateToken, canApproveLargeLoans, async (req, res) => {
  try {
    console.log('‚è≥ GET /api/fund-loans/pending-approvals - Obteniendo pendientes');
    
    const pendingLoans = await prisma.fundLoan.findMany({
      where: { 
        status: 'PENDING',
        amount: { gte: 1000000 } // Solo pr√©stamos que requieren aprobaci√≥n del rector
      },
      include: {
        lenderFund: { select: { name: true, code: true, currentBalance: true } },
        borrowerFund: { select: { name: true, code: true, currentBalance: true } },
        requester: { select: { name: true, role: true, email: true } }
      },
      orderBy: { requestDate: 'asc' }
    });

    // Calcular informaci√≥n adicional
    const loansWithDetails = pendingLoans.map(loan => {
      const daysSinceRequest = Math.ceil((new Date() - new Date(loan.requestDate)) / (1000 * 60 * 60 * 24));
      const daysUntilDue = Math.ceil((new Date(loan.dueDate) - new Date()) / (1000 * 60 * 60 * 24));
      
      return {
        ...loan,
        daysSinceRequest,
        daysUntilDue,
        isUrgent: daysSinceRequest >= 3 || daysUntilDue <= 30
      };
    });

    console.log(`‚úÖ Encontrados ${loansWithDetails.length} pr√©stamos pendientes`);
    res.json({
      success: true,
      loans: loansWithDetails,
      total: loansWithDetails.length
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo pendientes:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al obtener pr√©stamos pendientes',
      details: error.message 
    });
  }
});

// Aprobar pr√©stamo
router.patch('/:id/approve', authenticateToken, canApproveLargeLoans, [
  body('observations').optional().isString()
], async (req, res) => {
  try {
    console.log('‚úÖ PATCH /api/fund-loans/:id/approve - Aprobando pr√©stamo');
    
    const loanId = req.params.id;
    const { observations } = req.body;

    const loan = await prisma.fundLoan.findUnique({
      where: { id: loanId },
      include: {
        lenderFund: true,
        borrowerFund: true
      }
    });

    if (!loan) {
      return res.status(404).json({
        success: false,
        error: 'Pr√©stamo no encontrado'
      });
    }

    if (loan.status !== 'PENDING') {
      return res.status(400).json({
        success: false,
        error: 'Solo se pueden aprobar pr√©stamos pendientes'
      });
    }

    // Verificar saldo actual del fondo prestamista
    if (loan.lenderFund.currentBalance < loan.amount) {
      return res.status(400).json({
        success: false,
        error: `Saldo insuficiente en ${loan.lenderFund.name} para desembolsar el pr√©stamo`
      });
    }

    const result = await prisma.$transaction(async (tx) => {
      // Aprobar pr√©stamo
      const approvedLoan = await tx.fundLoan.update({
        where: { id: loanId },
        data: {
          status: 'DISBURSED', // Aprobamos y desembolsamos directamente
          approvedBy: req.user.id,
          approvalDate: new Date(),
          observations: observations || loan.observations
        }
      });

      // Registrar transacci√≥n de salida (fondo prestamista)
      const outTransaction = await tx.fundTransaction.create({
        data: {
          fundId: loan.lenderFundId,
          type: 'LOAN_DISBURSED',
          amount: loan.amount,
          description: `Pr√©stamo aprobado y otorgado a ${loan.borrowerFund.name}: ${loan.reason}`,
          userId: req.user.id,
          performedBy: req.user.id,
          fundLoanId: loan.id,
          balanceAfter: loan.lenderFund.currentBalance - loan.amount,
          isApproved: true
        }
      });

      // Registrar transacci√≥n de entrada (fondo receptor)
      const inTransaction = await tx.fundTransaction.create({
        data: {
          fundId: loan.borrowerFundId,
          type: 'LOAN_RECEIVED',
          amount: loan.amount,
          description: `Pr√©stamo recibido de ${loan.lenderFund.name}: ${loan.reason}`,
          userId: req.user.id,
          performedBy: req.user.id,
          fundLoanId: loan.id,
          balanceAfter: loan.borrowerFund.currentBalance + loan.amount,
          isApproved: true
        }
      });

      // Actualizar saldos
      await Promise.all([
        tx.fund.update({
          where: { id: loan.lenderFundId },
          data: {
            currentBalance: { decrement: loan.amount },
            totalExpenses: { increment: loan.amount },
            balance: { decrement: loan.amount }
          }
        }),
        tx.fund.update({
          where: { id: loan.borrowerFundId },
          data: {
            currentBalance: { increment: loan.amount },
            totalIncome: { increment: loan.amount },
            balance: { increment: loan.amount }
          }
        })
      ]);

      return { approvedLoan, outTransaction, inTransaction };
    });

    console.log('‚úÖ Pr√©stamo aprobado y desembolsado exitosamente');
    res.json({
      success: true,
      loan: result.approvedLoan,
      message: 'Pr√©stamo aprobado y desembolsado exitosamente'
    });

  } catch (error) {
    console.error('‚ùå Error aprobando pr√©stamo:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al aprobar pr√©stamo',
      details: error.message 
    });
  }
});

// Rechazar pr√©stamo
router.patch('/:id/reject', authenticateToken, canApproveLargeLoans, [
  body('reason').notEmpty().withMessage('Raz√≥n de rechazo es requerida')
], async (req, res) => {
  try {
    console.log('‚ùå PATCH /api/fund-loans/:id/reject - Rechazando pr√©stamo');
    
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Errores de validaci√≥n',
        details: errors.array()
      });
    }

    const loanId = req.params.id;
    const { reason } = req.body;

    const loan = await prisma.fundLoan.findUnique({
      where: { id: loanId }
    });

    if (!loan) {
      return res.status(404).json({
        success: false,
        error: 'Pr√©stamo no encontrado'
      });
    }

    if (loan.status !== 'PENDING') {
      return res.status(400).json({
        success: false,
        error: 'Solo se pueden rechazar pr√©stamos pendientes'
      });
    }

    const rejectedLoan = await prisma.fundLoan.update({
      where: { id: loanId },
      data: {
        status: 'CANCELLED',
        approvedBy: req.user.id,
        approvalDate: new Date(),
        observations: `RECHAZADO: ${reason}`
      }
    });

    console.log('‚úÖ Pr√©stamo rechazado');
    res.json({
      success: true,
      loan: rejectedLoan,
      message: 'Pr√©stamo rechazado'
    });

  } catch (error) {
    console.error('‚ùå Error rechazando pr√©stamo:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al rechazar pr√©stamo',
      details: error.message 
    });
  }
});

// ==========================================
// GESTI√ìN DE PAGOS
// ==========================================

// Registrar pago de pr√©stamo
router.post('/:id/payments', authenticateToken, canManageAccounting, [
  body('amount').isFloat({ min: 0.01 }).withMessage('Monto debe ser mayor a 0'),
  body('description').optional().isString()
], async (req, res) => {
  try {
    console.log('üí≥ POST /api/fund-loans/:id/payments - Registrando pago');
    
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Errores de validaci√≥n',
        details: errors.array()
      });
    }

    const loanId = req.params.id;
    const { amount, description } = req.body;

    const loan = await prisma.fundLoan.findUnique({
      where: { id: loanId },
      include: {
        lenderFund: true,
        borrowerFund: true
      }
    });

    if (!loan) {
      return res.status(404).json({
        success: false,
        error: 'Pr√©stamo no encontrado'
      });
    }

    if (!['DISBURSED', 'REPAYING'].includes(loan.status)) {
      return res.status(400).json({
        success: false,
        error: 'Solo se pueden registrar pagos en pr√©stamos desembolsados'
      });
    }

    if (amount > loan.pendingAmount) {
      return res.status(400).json({
        success: false,
        error: `El monto excede la deuda pendiente. M√°ximo: $${loan.pendingAmount.toLocaleString()}`
      });
    }

    if (loan.borrowerFund.currentBalance < amount) {
      return res.status(400).json({
        success: false,
        error: `Saldo insuficiente en ${loan.borrowerFund.name}`
      });
    }

    const result = await prisma.$transaction(async (tx) => {
      // Actualizar pr√©stamo
      const newTotalRepaid = loan.totalRepaid + amount;
      const newPendingAmount = loan.amount - newTotalRepaid;
      const isFullyRepaid = newPendingAmount <= 0;

      const updatedLoan = await tx.fundLoan.update({
        where: { id: loanId },
        data: {
          totalRepaid: newTotalRepaid,
          pendingAmount: Math.max(0, newPendingAmount),
          isFullyRepaid,
          status: isFullyRepaid ? 'FULLY_REPAID' : 'REPAYING'
        }
      });

      // Registrar transacci√≥n de salida (fondo que paga)
      const outTransaction = await tx.fundTransaction.create({
        data: {
          fundId: loan.borrowerFundId,
          type: 'LOAN_REPAYMENT',
          amount,
          description: description || `Pago de pr√©stamo a ${loan.lenderFund.name}`,
          userId: req.user.id,
          performedBy: req.user.id,
          fundLoanId: loan.id,
          balanceAfter: loan.borrowerFund.currentBalance - amount,
          isApproved: true
        }
      });

      // Registrar transacci√≥n de entrada (fondo que recibe el pago)
      const inTransaction = await tx.fundTransaction.create({
        data: {
          fundId: loan.lenderFundId,
          type: 'INCOME',
          amount,
          description: description || `Pago recibido de pr√©stamo de ${loan.borrowerFund.name}`,
          userId: req.user.id,
          performedBy: req.user.id,
          fundLoanId: loan.id,
          balanceAfter: loan.lenderFund.currentBalance + amount,
          isApproved: true
        }
      });

      // Actualizar saldos
      await Promise.all([
        tx.fund.update({
          where: { id: loan.borrowerFundId },
          data: {
            currentBalance: { decrement: amount },
            totalExpenses: { increment: amount },
            balance: { decrement: amount }
          }
        }),
        tx.fund.update({
          where: { id: loan.lenderFundId },
          data: {
            currentBalance: { increment: amount },
            totalIncome: { increment: amount },
            balance: { increment: amount }
          }
        })
      ]);

      return { updatedLoan, outTransaction, inTransaction };
    });

    const message = result.updatedLoan.isFullyRepaid 
      ? 'Pago registrado - Pr√©stamo totalmente pagado'
      : 'Pago registrado exitosamente';

    console.log('‚úÖ Pago de pr√©stamo registrado');
    res.status(201).json({
      success: true,
      loan: result.updatedLoan,
      payment: result.outTransaction,
      message
    });

  } catch (error) {
    console.error('‚ùå Error registrando pago:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al registrar pago',
      details: error.message 
    });
  }
});

// Obtener historial de pagos de un pr√©stamo
router.get('/:id/payments', authenticateToken, async (req, res) => {
  try {
    console.log('üìã GET /api/fund-loans/:id/payments - Historial de pagos');
    
    const loanId = req.params.id;

    const loan = await prisma.fundLoan.findUnique({
      where: { id: loanId },
      select: { id: true, amount: true, totalRepaid: true, pendingAmount: true }
    });

    if (!loan) {
      return res.status(404).json({
        success: false,
        error: 'Pr√©stamo no encontrado'
      });
    }

    const payments = await prisma.fundTransaction.findMany({
      where: {
        fundLoanId: loanId,
        type: { in: ['LOAN_REPAYMENT', 'INCOME'] }
      },
      include: {
        user: { select: { name: true, role: true } },
        fund: { select: { name: true, code: true } }
      },
      orderBy: { createdAt: 'desc' }
    });

    // Separar pagos de salida (del fondo deudor) y entrada (al fondo prestamista)
    const outgoingPayments = payments.filter(p => p.type === 'LOAN_REPAYMENT');
    const incomingPayments = payments.filter(p => p.type === 'INCOME');

    // Calcular estad√≠sticas de pagos
    const paymentStats = {
      totalPayments: outgoingPayments.length,
      totalPaid: loan.totalRepaid || 0,
      pendingAmount: loan.pendingAmount || 0,
      originalAmount: loan.amount,
      paymentProgress: loan.amount > 0 ? Math.round((loan.totalRepaid / loan.amount) * 100) : 0
    };

    console.log(`‚úÖ Obtenidos ${payments.length} registros de pago`);
    res.json({
      success: true,
      payments: outgoingPayments, // Solo los pagos del deudor
      allTransactions: payments, // Todas las transacciones relacionadas
      paymentStats
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo pagos:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al obtener historial de pagos',
      details: error.message 
    });
  }
});

// ==========================================
// CONSULTAS ESPECIALIZADAS
// ==========================================

// Obtener pr√©stamos vencidos
router.get('/overdue/list', authenticateToken, async (req, res) => {
  try {
    console.log('‚ö†Ô∏è GET /api/fund-loans/overdue/list - Pr√©stamos vencidos');
    
    const today = new Date();
    
    const overdueLoans = await prisma.fundLoan.findMany({
      where: {
        dueDate: { lt: today },
        status: { in: ['DISBURSED', 'REPAYING'] },
        isFullyRepaid: false
      },
      include: {
        lenderFund: { select: { name: true, code: true } },
        borrowerFund: { select: { name: true, code: true } },
        requester: { select: { name: true, role: true } }
      },
      orderBy: { dueDate: 'asc' }
    });

    // Calcular d√≠as de retraso
    const loansWithDelay = overdueLoans.map(loan => {
      const dueDate = new Date(loan.dueDate);
      const daysOverdue = Math.floor((today - dueDate) / (1000 * 60 * 60 * 24));
      
      return {
        ...loan,
        daysOverdue,
        severityLevel: daysOverdue <= 7 ? 'LOW' : daysOverdue <= 30 ? 'MEDIUM' : 'HIGH'
      };
    });

    console.log(`‚úÖ Encontrados ${loansWithDelay.length} pr√©stamos vencidos`);
    res.json({
      success: true,
      loans: loansWithDelay,
      total: loansWithDelay.length,
      summary: {
        lowSeverity: loansWithDelay.filter(l => l.severityLevel === 'LOW').length,
        mediumSeverity: loansWithDelay.filter(l => l.severityLevel === 'MEDIUM').length,
        highSeverity: loansWithDelay.filter(l => l.severityLevel === 'HIGH').length
      }
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo vencidos:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al obtener pr√©stamos vencidos',
      details: error.message 
    });
  }
});

// Obtener estad√≠sticas generales de pr√©stamos
router.get('/statistics/general', authenticateToken, async (req, res) => {
  try {
    console.log('üìä GET /api/fund-loans/statistics/general - Estad√≠sticas generales');
    
    const { fundId } = req.query;
    
    let whereClause = {};
    if (fundId) {
      whereClause = {
        OR: [
          { lenderFundId: fundId },
          { borrowerFundId: fundId }
        ]
      };
    }

    const [
      totalLoans,
      pendingLoans,
      activeLoans,
      completedLoans,
      cancelledLoans,
      totalAmountLent,
      totalAmountRepaid,
      overdueLoans
    ] = await Promise.all([
      prisma.fundLoan.count({ where: whereClause }),
      prisma.fundLoan.count({ where: { ...whereClause, status: 'PENDING' } }),
      prisma.fundLoan.count({ where: { ...whereClause, status: { in: ['DISBURSED', 'REPAYING'] } } }),
      prisma.fundLoan.count({ where: { ...whereClause, status: 'FULLY_REPAID' } }),
      prisma.fundLoan.count({ where: { ...whereClause, status: 'CANCELLED' } }),
      prisma.fundLoan.aggregate({
        where: { ...whereClause, status: { not: 'CANCELLED' } },
        _sum: { amount: true }
      }),
      prisma.fundLoan.aggregate({
        where: { ...whereClause, status: { not: 'CANCELLED' } },
        _sum: { totalRepaid: true }
      }),
      prisma.fundLoan.count({
        where: {
          ...whereClause,
          dueDate: { lt: new Date() },
          status: { in: ['DISBURSED', 'REPAYING'] },
          isFullyRepaid: false
        }
      })
    ]);

    const statistics = {
      overview: {
        totalLoans,
        pendingLoans,
        activeLoans,
        completedLoans,
        cancelledLoans,
        overdueLoans
      },
      financial: {
        totalAmountLent: totalAmountLent._sum.amount || 0,
        totalAmountRepaid: totalAmountRepaid._sum.totalRepaid || 0,
        pendingAmount: (totalAmountLent._sum.amount || 0) - (totalAmountRepaid._sum.totalRepaid || 0),
        repaymentRate: totalAmountLent._sum.amount > 0 
          ? Math.round(((totalAmountRepaid._sum.totalRepaid || 0) / totalAmountLent._sum.amount) * 100)
          : 0
      },
      health: {
        overduePercentage: activeLoans > 0 ? Math.round((overdueLoans / activeLoans) * 100) : 0,
        completionRate: totalLoans > 0 ? Math.round((completedLoans / totalLoans) * 100) : 0,
        cancellationRate: totalLoans > 0 ? Math.round((cancelledLoans / totalLoans) * 100) : 0
      }
    };

    console.log('‚úÖ Estad√≠sticas calculadas');
    res.json({
      success: true,
      statistics
    });

  } catch (error) {
    console.error('‚ùå Error calculando estad√≠sticas:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al calcular estad√≠sticas',
      details: error.message 
    });
  }
});

// ==========================================
// GESTI√ìN ADMINISTRATIVA
// ==========================================

// Cancelar pr√©stamo pendiente
router.patch('/:id/cancel', authenticateToken, canManageAccounting, [
  body('reason').notEmpty().withMessage('Raz√≥n de cancelaci√≥n es requerida')
], async (req, res) => {
  try {
    console.log('üö´ PATCH /api/fund-loans/:id/cancel - Cancelando pr√©stamo');
    
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Errores de validaci√≥n',
        details: errors.array()
      });
    }

    const loanId = req.params.id;
    const { reason } = req.body;

    const loan = await prisma.fundLoan.findUnique({
      where: { id: loanId }
    });

    if (!loan) {
      return res.status(404).json({
        success: false,
        error: 'Pr√©stamo no encontrado'
      });
    }

    // Solo se pueden cancelar pr√©stamos pendientes o aprobados no desembolsados
    if (!['PENDING', 'APPROVED'].includes(loan.status)) {
      return res.status(400).json({
        success: false,
        error: 'Solo se pueden cancelar pr√©stamos pendientes o aprobados no desembolsados'
      });
    }

    // Verificar permisos: solo el solicitante o admin/rector pueden cancelar
    if (loan.requestedBy !== req.user.id && !['RECTOR', 'ADMIN'].includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        error: 'No tiene permisos para cancelar este pr√©stamo'
      });
    }

    const cancelledLoan = await prisma.fundLoan.update({
      where: { id: loanId },
      data: {
        status: 'CANCELLED',
        observations: `CANCELADO: ${reason}`,
        ...(loan.status === 'PENDING' ? {} : {
          approvedBy: req.user.id,
          approvalDate: new Date()
        })
      }
    });

    console.log('‚úÖ Pr√©stamo cancelado');
    res.json({
      success: true,
      loan: cancelledLoan,
      message: 'Pr√©stamo cancelado exitosamente'
    });

  } catch (error) {
    console.error('‚ùå Error cancelando pr√©stamo:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al cancelar pr√©stamo',
      details: error.message 
    });
  }
});

// Actualizar observaciones del pr√©stamo
router.patch('/:id/observations', authenticateToken, canManageAccounting, [
  body('observations').isString().withMessage('Las observaciones deben ser texto')
], async (req, res) => {
  try {
    console.log('üìù PATCH /api/fund-loans/:id/observations - Actualizando observaciones');
    
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Errores de validaci√≥n',
        details: errors.array()
      });
    }

    const loanId = req.params.id;
    const { observations } = req.body;

    const loan = await prisma.fundLoan.findUnique({
      where: { id: loanId }
    });

    if (!loan) {
      return res.status(404).json({
        success: false,
        error: 'Pr√©stamo no encontrado'
      });
    }

    // Verificar permisos: solo el solicitante o admin/rector pueden editar
    if (loan.requestedBy !== req.user.id && !['RECTOR', 'ADMIN'].includes(req.user.role)) {
      return res.status(403).json({
        success: false,
        error: 'No tiene permisos para editar este pr√©stamo'
      });
    }

    const updatedLoan = await prisma.fundLoan.update({
      where: { id: loanId },
      data: { observations }
    });

    console.log('‚úÖ Observaciones actualizadas');
    res.json({
      success: true,
      loan: updatedLoan,
      message: 'Observaciones actualizadas exitosamente'
    });

  } catch (error) {
    console.error('‚ùå Error actualizando observaciones:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al actualizar observaciones',
      details: error.message 
    });
  }
});

// Extender fecha de vencimiento
router.patch('/:id/extend-due-date', authenticateToken, canApproveLargeLoans, [
  body('newDueDate').isISO8601().withMessage('Nueva fecha de vencimiento inv√°lida'),
  body('reason').notEmpty().withMessage('Raz√≥n de extensi√≥n es requerida')
], async (req, res) => {
  try {
    console.log('üìÖ PATCH /api/fund-loans/:id/extend-due-date - Extendiendo vencimiento');
    
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Errores de validaci√≥n',
        details: errors.array()
      });
    }

    const loanId = req.params.id;
    const { newDueDate, reason } = req.body;

    const loan = await prisma.fundLoan.findUnique({
      where: { id: loanId }
    });

    if (!loan) {
      return res.status(404).json({
        success: false,
        error: 'Pr√©stamo no encontrado'
      });
    }

    if (!['DISBURSED', 'REPAYING'].includes(loan.status)) {
      return res.status(400).json({
        success: false,
        error: 'Solo se puede extender la fecha de pr√©stamos activos'
      });
    }

    const parsedNewDueDate = new Date(newDueDate);
    const currentDueDate = new Date(loan.dueDate);

    if (parsedNewDueDate <= currentDueDate) {
      return res.status(400).json({
        success: false,
        error: 'La nueva fecha debe ser posterior a la fecha actual de vencimiento'
      });
    }

    // M√°ximo 6 meses de extensi√≥n
    const maxExtensionDate = new Date(currentDueDate);
    maxExtensionDate.setMonth(maxExtensionDate.getMonth() + 6);

    if (parsedNewDueDate > maxExtensionDate) {
      return res.status(400).json({
        success: false,
        error: 'La extensi√≥n no puede ser mayor a 6 meses'
      });
    }

    const updatedLoan = await prisma.fundLoan.update({
      where: { id: loanId },
      data: {
        dueDate: parsedNewDueDate,
        observations: `${loan.observations || ''}\n\nEXTENSI√ìN: ${reason} - Nueva fecha: ${parsedNewDueDate.toLocaleDateString()} (Autorizada por: ${req.user.name})`
      }
    });

    console.log('‚úÖ Fecha de vencimiento extendida');
    res.json({
      success: true,
      loan: updatedLoan,
      message: 'Fecha de vencimiento extendida exitosamente'
    });

  } catch (error) {
    console.error('‚ùå Error extendiendo fecha:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al extender fecha de vencimiento',
      details: error.message 
    });
  }
});

// ==========================================
// REPORTES Y EXPORTACI√ìN
// ==========================================

// Exportar pr√©stamos a CSV
router.get('/export/csv', authenticateToken, async (req, res) => {
  try {
    console.log('üì§ GET /api/fund-loans/export/csv - Exportando a CSV');
    
    const { 
      status,
      lenderFundId,
      borrowerFundId,
      startDate,
      endDate
    } = req.query;

    let where = {};

    // Aplicar filtros
    if (status) {
      where.status = { in: status.split(',') };
    }

    if (lenderFundId) {
      where.lenderFundId = lenderFundId;
    }

    if (borrowerFundId) {
      where.borrowerFundId = borrowerFundId;
    }

    if (startDate || endDate) {
      where.requestDate = {};
      if (startDate) where.requestDate.gte = new Date(startDate);
      if (endDate) where.requestDate.lte = new Date(endDate);
    }

    const loans = await prisma.fundLoan.findMany({
      where,
      include: {
        lenderFund: { select: { name: true, code: true } },
        borrowerFund: { select: { name: true, code: true } },
        requester: { select: { name: true, role: true } },
        approver: { select: { name: true, role: true } }
      },
      orderBy: { requestDate: 'desc' }
    });

    // Generar CSV
    const csvHeaders = [
      'ID',
      'Fondo Prestamista',
      'C√≥digo Prestamista',
      'Fondo Receptor',
      'C√≥digo Receptor',
      'Monto Original',
      'Total Pagado',
      'Monto Pendiente',
      'Estado',
      'Fecha Solicitud',
      'Fecha Vencimiento',
      'Fecha Aprobaci√≥n',
      'Solicitado Por',
      'Aprobado Por',
      'Raz√≥n',
      'Observaciones'
    ];

    const csvRows = loans.map(loan => [
      loan.id,
      loan.lenderFund.name,
      loan.lenderFund.code,
      loan.borrowerFund.name,
      loan.borrowerFund.code,
      loan.amount,
      loan.totalRepaid || 0,
      loan.pendingAmount || 0,
      loan.status,
      new Date(loan.requestDate).toLocaleDateString('es-CO'),
      new Date(loan.dueDate).toLocaleDateString('es-CO'),
      loan.approvalDate ? new Date(loan.approvalDate).toLocaleDateString('es-CO') : '',
      loan.requester.name,
      loan.approver?.name || '',
      `"${(loan.reason || '').replace(/"/g, '""')}"`,
      `"${(loan.observations || '').replace(/"/g, '""')}"`
    ]);

    const csvContent = [csvHeaders, ...csvRows]
      .map(row => row.join(','))
      .join('\n');

    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="prestamos_fondos_${new Date().toISOString().split('T')[0]}.csv"`);
    res.send('\uFEFF' + csvContent); // BOM para UTF-8

    console.log(`‚úÖ Exportados ${loans.length} pr√©stamos a CSV`);

  } catch (error) {
    console.error('‚ùå Error exportando CSV:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al exportar datos',
      details: error.message 
    });
  }
});

// ==========================================
// NOTIFICACIONES Y ALERTAS
// ==========================================

// Obtener pr√©stamos que requieren atenci√≥n
router.get('/alerts/attention-required', authenticateToken, async (req, res) => {
  try {
    console.log('üö® GET /api/fund-loans/alerts/attention-required - Alertas de pr√©stamos');
    
    const today = new Date();
    const in7Days = new Date();
    in7Days.setDate(today.getDate() + 7);

    const [pendingApprovals, nearDue, overdue] = await Promise.all([
      // Pr√©stamos pendientes de aprobaci√≥n
      prisma.fundLoan.findMany({
        where: {
          status: 'PENDING',
          amount: { gte: 1000000 }
        },
        include: {
          lenderFund: { select: { name: true } },
          borrowerFund: { select: { name: true } },
          requester: { select: { name: true } }
        }
      }),
      
      // Pr√©stamos pr√≥ximos a vencer
      prisma.fundLoan.findMany({
        where: {
          status: { in: ['DISBURSED', 'REPAYING'] },
          dueDate: { gte: today, lte: in7Days },
          isFullyRepaid: false
        },
        include: {
          lenderFund: { select: { name: true } },
          borrowerFund: { select: { name: true } }
        }
      }),
      
      // Pr√©stamos vencidos
      prisma.fundLoan.findMany({
        where: {
          status: { in: ['DISBURSED', 'REPAYING'] },
          dueDate: { lt: today },
          isFullyRepaid: false
        },
        include: {
          lenderFund: { select: { name: true } },
          borrowerFund: { select: { name: true } }
        }
      })
    ]);

    const alerts = {
      pendingApprovals: {
        count: pendingApprovals.length,
        items: pendingApprovals.map(loan => ({
          id: loan.id,
          amount: loan.amount,
          lenderFund: loan.lenderFund.name,
          borrowerFund: loan.borrowerFund.name,
          requester: loan.requester.name,
          daysPending: Math.ceil((today - new Date(loan.requestDate)) / (1000 * 60 * 60 * 24))
        }))
      },
      nearDue: {
        count: nearDue.length,
        items: nearDue.map(loan => ({
          id: loan.id,
          amount: loan.amount,
          pendingAmount: loan.pendingAmount,
          lenderFund: loan.lenderFund.name,
          borrowerFund: loan.borrowerFund.name,
          dueDate: loan.dueDate,
          daysUntilDue: Math.ceil((new Date(loan.dueDate) - today) / (1000 * 60 * 60 * 24))
        }))
      },
      overdue: {
        count: overdue.length,
        items: overdue.map(loan => ({
          id: loan.id,
          amount: loan.amount,
          pendingAmount: loan.pendingAmount,
          lenderFund: loan.lenderFund.name,
          borrowerFund: loan.borrowerFund.name,
          dueDate: loan.dueDate,
          daysOverdue: Math.ceil((today - new Date(loan.dueDate)) / (1000 * 60 * 60 * 24))
        }))
      }
    };

    const totalAlerts = alerts.pendingApprovals.count + alerts.nearDue.count + alerts.overdue.count;

    console.log(`‚úÖ Generadas ${totalAlerts} alertas`);
    res.json({
      success: true,
      alerts,
      summary: {
        totalAlerts,
        criticalCount: alerts.overdue.count,
        warningCount: alerts.nearDue.count,
        infoCount: alerts.pendingApprovals.count
      }
    });

  } catch (error) {
    console.error('‚ùå Error generando alertas:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Error al generar alertas',
      details: error.message 
    });
  }
});

module.exports = router;