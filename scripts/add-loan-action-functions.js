/**
 * AGREGAR FUNCIONES DE ACCIONES DE PR√âSTAMOS AL FRONTEND
 */

const fs = require('fs');
const path = require('path');

console.log('üîß AGREGANDO FUNCIONES DE ACCIONES DE PR√âSTAMOS...');

const fundLoansPath = path.join(__dirname, '../public/js/fund-loans.js');
let fundLoansContent = fs.readFileSync(fundLoansPath, 'utf8');

// Agregar las funciones de acciones de pr√©stamos
const loanActionFunctions = `
// ==========================================
// FUNCIONES DE ACCIONES DE PR√âSTAMOS
// ==========================================

// Aprobar pr√©stamo
async function approveLoan(loanId) {
    try {
        console.log(\`‚úÖ Aprobando pr√©stamo: \${loanId}\`);
        
        const approvalNotes = prompt('Notas de aprobaci√≥n (opcional):') || '';
        
        if (!confirm('¬øEst√° seguro de que desea aprobar este pr√©stamo?')) {
            return;
        }
        
        showLoading();
        
        const response = await api.approveLoan(loanId, approvalNotes);
        
        if (response.success) {
            showSuccess('Pr√©stamo aprobado exitosamente');
            await loadFundLoans(); // Recargar lista
        } else {
            throw new Error(response.error || 'Error al aprobar pr√©stamo');
        }
        
    } catch (error) {
        console.error('Error approving loan:', error);
        showError(error.message || 'Error al aprobar pr√©stamo');
    } finally {
        hideLoading();
    }
}

// Rechazar pr√©stamo
async function rejectLoan(loanId) {
    try {
        console.log(\`‚ùå Rechazando pr√©stamo: \${loanId}\`);
        
        const rejectionReason = prompt('Raz√≥n del rechazo (requerida):');
        
        if (!rejectionReason || rejectionReason.trim() === '') {
            showError('La raz√≥n del rechazo es requerida');
            return;
        }
        
        if (!confirm('¬øEst√° seguro de que desea rechazar este pr√©stamo?')) {
            return;
        }
        
        showLoading();
        
        const response = await api.rejectLoan(loanId, rejectionReason);
        
        if (response.success) {
            showSuccess('Pr√©stamo rechazado');
            await loadFundLoans(); // Recargar lista
        } else {
            throw new Error(response.error || 'Error al rechazar pr√©stamo');
        }
        
    } catch (error) {
        console.error('Error rejecting loan:', error);
        showError(error.message || 'Error al rechazar pr√©stamo');
    } finally {
        hideLoading();
    }
}

// Desembolsar pr√©stamo
async function disburseLoan(loanId) {
    try {
        console.log(\`üí∞ Desembolsando pr√©stamo: \${loanId}\`);
        
        const disbursementNotes = prompt('Notas de desembolso (opcional):') || '';
        
        if (!confirm('¬øEst√° seguro de que desea desembolsar este pr√©stamo?')) {
            return;
        }
        
        showLoading();
        
        const response = await api.disburseLoan(loanId, disbursementNotes);
        
        if (response.success) {
            showSuccess('Pr√©stamo desembolsado exitosamente');
            await loadFundLoans(); // Recargar lista
        } else {
            throw new Error(response.error || 'Error al desembolsar pr√©stamo');
        }
        
    } catch (error) {
        console.error('Error disbursing loan:', error);
        showError(error.message || 'Error al desembolsar pr√©stamo');
    } finally {
        hideLoading();
    }
}

// Ver detalles del pr√©stamo
async function viewLoanDetails(loanId) {
    try {
        console.log(\`üîç Viendo detalles del pr√©stamo: \${loanId}\`);
        
        // Por ahora mostrar un alert simple
        // En el futuro se puede implementar un modal con detalles completos
        alert(\`Detalles del pr√©stamo ID: \${loanId}\\n\\nEsta funcionalidad se implementar√° pr√≥ximamente.\`);
        
    } catch (error) {
        console.error('Error viewing loan details:', error);
        showError('Error al ver detalles del pr√©stamo');
    }
}

// Editar pr√©stamo
async function editLoan(loanId) {
    try {
        console.log(\`üìù Editando pr√©stamo: \${loanId}\`);
        
        // Por ahora mostrar un alert simple
        // En el futuro se puede implementar un modal de edici√≥n
        alert(\`Editar pr√©stamo ID: \${loanId}\\n\\nEsta funcionalidad se implementar√° pr√≥ximamente.\`);
        
    } catch (error) {
        console.error('Error editing loan:', error);
        showError('Error al editar pr√©stamo');
    }
}

// Eliminar pr√©stamo
async function deleteLoan(loanId) {
    try {
        console.log(\`üóëÔ∏è Eliminando pr√©stamo: \${loanId}\`);
        
        if (!confirm('¬øEst√° seguro de que desea eliminar este pr√©stamo?\\n\\nEsta acci√≥n no se puede deshacer.')) {
            return;
        }
        
        // Por ahora mostrar un alert simple
        // En el futuro se puede implementar la eliminaci√≥n real
        alert(\`Eliminar pr√©stamo ID: \${loanId}\\n\\nEsta funcionalidad se implementar√° pr√≥ximamente.\`);
        
    } catch (error) {
        console.error('Error deleting loan:', error);
        showError('Error al eliminar pr√©stamo');
    }
}
`;

// Agregar las funciones antes del final del archivo
const lastFunctionIndex = fundLoansContent.lastIndexOf('console.log(\'‚úÖ Fund loans functions loaded successfully\');');
if (lastFunctionIndex !== -1) {
    fundLoansContent = fundLoansContent.substring(0, lastFunctionIndex) + loanActionFunctions + '\n\n' + fundLoansContent.substring(lastFunctionIndex);
} else {
    // Si no encuentra el marcador, agregar al final
    fundLoansContent += '\n' + loanActionFunctions;
}

// Agregar las funciones al objeto window para que est√©n disponibles globalmente
const globalExports = `
// Hacer funciones de acciones disponibles globalmente
window.approveLoan = approveLoan;
window.rejectLoan = rejectLoan;
window.disburseLoan = disburseLoan;
window.viewLoanDetails = viewLoanDetails;
window.editLoan = editLoan;
window.deleteLoan = deleteLoan;
`;

// Agregar al final del archivo
fundLoansContent += '\n' + globalExports;

// Escribir el archivo actualizado
fs.writeFileSync(fundLoansPath, fundLoansContent);

console.log('‚úÖ Funciones de acciones de pr√©stamos agregadas');

console.log('');
console.log('üéØ FUNCIONES AGREGADAS');
console.log('');
console.log('üìã ACCIONES PRINCIPALES:');
console.log('  ‚úÖ approveLoan(loanId) - Aprobar pr√©stamo');
console.log('  ‚úÖ rejectLoan(loanId) - Rechazar pr√©stamo');
console.log('  ‚úÖ disburseLoan(loanId) - Desembolsar pr√©stamo');
console.log('');
console.log('üìã ACCIONES ADICIONALES:');
console.log('  ‚úÖ viewLoanDetails(loanId) - Ver detalles');
console.log('  ‚úÖ editLoan(loanId) - Editar pr√©stamo');
console.log('  ‚úÖ deleteLoan(loanId) - Eliminar pr√©stamo');
console.log('');
console.log('üìã CARACTER√çSTICAS:');
console.log('  ‚úÖ Confirmaciones de usuario');
console.log('  ‚úÖ Validaciones de entrada');
console.log('  ‚úÖ Manejo de errores');
console.log('  ‚úÖ Recarga autom√°tica de lista');
console.log('  ‚úÖ Disponibles globalmente (window.*)');
console.log('');
console.log('üîÑ RECARGA LA P√ÅGINA WEB:');
console.log('  - Presiona Ctrl+F5 para forzar recarga');
console.log('  - Los botones de acciones deber√≠an funcionar');
console.log('  - Prueba aprobar/rechazar pr√©stamos');
console.log('');
console.log('üß™ PRUEBA:');
console.log('  1. Ve a la lista de pr√©stamos');
console.log('  2. Haz clic en los botones de acciones');
console.log('  3. Las funciones deber√≠an ejecutarse sin errores');