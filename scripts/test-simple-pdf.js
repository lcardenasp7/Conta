// Script para probar la versi√≥n simplificada del PDF

console.log('üß™ Probando versi√≥n simplificada de PDF...');

// Funci√≥n de prueba inmediata
async function testSimplePDF() {
    console.log('üöÄ PRUEBA INMEDIATA - PDF SIMPLIFICADO');
    console.log('=====================================');
    
    try {
        // 1. Token
        const token = localStorage.getItem('token');
        if (!token) {
            console.error('‚ùå No hay token');
            return;
        }
        console.log('üîë Token: ‚úÖ');
        
        // 2. Obtener factura
        const invoicesResponse = await fetch('/api/invoices?limit=1', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (!invoicesResponse.ok) {
            console.error('‚ùå Error facturas:', invoicesResponse.status);
            return;
        }
        
        const invoicesData = await invoicesResponse.json();
        if (!invoicesData.invoices || invoicesData.invoices.length === 0) {
            console.error('‚ùå No hay facturas');
            return;
        }
        
        const invoice = invoicesData.invoices[0];
        console.log('üéØ Factura:', invoice.invoiceNumber);
        
        // 3. Probar PDF simplificado
        console.log('\nüì• Probando PDF simplificado...');
        
        const startTime = Date.now();
        
        const pdfResponse = await fetch(`/api/invoices/${invoice.id}/pdf`, {
            method: 'GET',
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        const responseTime = Date.now() - startTime;
        
        console.log('‚è±Ô∏è Tiempo:', responseTime, 'ms');
        console.log('üìä Status:', pdfResponse.status);
        console.log('üìä OK:', pdfResponse.ok);
        
        // Headers cr√≠ticos
        const contentType = pdfResponse.headers.get('content-type');
        const contentLength = pdfResponse.headers.get('content-length');
        
        console.log('üìã Content-Type:', contentType);
        console.log('üìã Content-Length:', contentLength, '‚Üê ¬°DEBE TENER VALOR!');
        
        if (!pdfResponse.ok) {
            const errorText = await pdfResponse.text();
            console.error('‚ùå Error response:', errorText);
            return;
        }
        
        // 4. Procesar blob
        console.log('\nüì¶ Procesando blob...');
        const blobStart = Date.now();
        
        const blob = await pdfResponse.blob();
        
        const blobTime = Date.now() - blobStart;
        console.log('‚è±Ô∏è Tiempo blob:', blobTime, 'ms');
        console.log('üì¶ Blob size:', blob.size, 'bytes');
        
        if (blob.size === 0) {
            console.error('‚ùå Blob vac√≠o');
            return;
        }
        
        // 5. Descargar
        console.log('\nüíæ Descargando...');
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `SIMPLE_${invoice.invoiceNumber}.pdf`;
        
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        setTimeout(() => URL.revokeObjectURL(url), 1000);
        
        console.log('\nüéâ √âXITO - PDF SIMPLIFICADO DESCARGADO');
        console.log('‚úÖ ¬øSe descarg√≥ correctamente?');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå ERROR:', error);
        console.error('üìÑ Stack:', error.stack);
        return false;
    }
}

// Funci√≥n para comparar con m√©todo anterior
async function compareWithPrevious() {
    console.log('üîÑ Comparando con m√©todo anterior...');
    
    try {
        // Primero probar el nuevo
        console.log('\n1Ô∏è‚É£ Probando m√©todo simplificado...');
        const simpleResult = await testSimplePDF();
        
        // Esperar un momento
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Luego probar el original si existe
        console.log('\n2Ô∏è‚É£ Probando m√©todo original...');
        if (typeof downloadInvoice === 'function') {
            try {
                const token = localStorage.getItem('token');
                const invoicesResponse = await fetch('/api/invoices?limit=1', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (invoicesResponse.ok) {
                    const invoicesData = await invoicesResponse.json();
                    if (invoicesData.invoices && invoicesData.invoices.length > 0) {
                        await downloadInvoice(invoicesData.invoices[0].id);
                        console.log('‚úÖ M√©todo original tambi√©n funcion√≥');
                    }
                }
            } catch (error) {
                console.log('‚ùå M√©todo original fall√≥:', error.message);
            }
        } else {
            console.log('‚ö†Ô∏è M√©todo original no disponible');
        }
        
        console.log('\nüìä RESUMEN:');
        console.log('   M√©todo simplificado:', simpleResult ? '‚úÖ FUNCIONA' : '‚ùå FALLA');
        
    } catch (error) {
        console.error('‚ùå Error en comparaci√≥n:', error);
    }
}

// Exportar funciones
window.testSimplePDF = testSimplePDF;
window.compareWithPrevious = compareWithPrevious;

console.log('‚úÖ Script cargado');
console.log('üí° Funciones:');
console.log('   - testSimplePDF() - Probar PDF simplificado');
console.log('   - compareWithPrevious() - Comparar m√©todos');

// Auto-ejecutar
setTimeout(testSimplePDF, 1000);