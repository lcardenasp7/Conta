// Script para probar la correcci√≥n del buffer PDF

console.log('üß™ Probando correcci√≥n de buffer PDF...');

// Funci√≥n de prueba r√°pida
async function testBufferFix() {
    console.log('üöÄ Iniciando prueba de buffer fix...');
    
    try {
        // 1. Obtener token
        const token = localStorage.getItem('token');
        if (!token) {
            console.error('‚ùå No hay token');
            return;
        }
        
        // 2. Obtener factura
        const invoicesResponse = await fetch('/api/invoices?limit=1', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (!invoicesResponse.ok) {
            console.error('‚ùå Error obteniendo facturas');
            return;
        }
        
        const invoicesData = await invoicesResponse.json();
        if (!invoicesData.invoices || invoicesData.invoices.length === 0) {
            console.error('‚ùå No hay facturas');
            return;
        }
        
        const invoice = invoicesData.invoices[0];
        console.log('üéØ Probando con factura:', invoice.invoiceNumber);
        
        // 3. Probar descarga con nuevo endpoint
        console.log('üì• Probando descarga con buffer...');
        
        const startTime = Date.now();
        
        const pdfResponse = await fetch(`/api/invoices/${invoice.id}/pdf`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        
        const responseTime = Date.now() - startTime;
        
        console.log('‚è±Ô∏è Tiempo de respuesta:', responseTime, 'ms');
        console.log('üìä Status:', pdfResponse.status);
        console.log('üìä OK:', pdfResponse.ok);
        
        // Verificar headers
        const contentType = pdfResponse.headers.get('content-type');
        const contentLength = pdfResponse.headers.get('content-length');
        
        console.log('üìã Content-Type:', contentType);
        console.log('üìã Content-Length:', contentLength);
        
        if (!pdfResponse.ok) {
            const errorText = await pdfResponse.text();
            console.error('‚ùå Error:', errorText);
            return;
        }
        
        // Procesar blob
        console.log('üì¶ Procesando blob...');
        const blob = await pdfResponse.blob();
        
        console.log('üì¶ Blob size:', blob.size, 'bytes');
        console.log('üì¶ Blob type:', blob.type);
        
        if (blob.size === 0) {
            console.error('‚ùå Blob vac√≠o');
            return;
        }
        
        // Intentar descarga
        console.log('üíæ Ejecutando descarga...');
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `BufferTest_${invoice.invoiceNumber}.pdf`;
        
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        setTimeout(() => URL.revokeObjectURL(url), 1000);
        
        console.log('‚úÖ PRUEBA COMPLETADA - ¬øSe descarg√≥ el PDF?');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Error en prueba:', error);
        return false;
    }
}

// Funci√≥n para comparar antes y despu√©s
async function compareDownloadMethods() {
    console.log('üîÑ Comparando m√©todos de descarga...');
    
    try {
        const token = localStorage.getItem('token');
        const invoicesResponse = await fetch('/api/invoices?limit=1', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (invoicesResponse.ok) {
            const invoicesData = await invoicesResponse.json();
            if (invoicesData.invoices && invoicesData.invoices.length > 0) {
                const invoice = invoicesData.invoices[0];
                
                console.log('üìä Comparaci√≥n de m√©todos:');
                console.log('   Factura:', invoice.invoiceNumber);
                console.log('   ID:', invoice.id);
                
                // M√©todo 1: Funci√≥n original
                console.log('\n1Ô∏è‚É£ Probando funci√≥n original...');
                if (typeof downloadInvoice === 'function') {
                    try {
                        await downloadInvoice(invoice.id);
                        console.log('‚úÖ Funci√≥n original ejecutada');
                    } catch (error) {
                        console.log('‚ùå Funci√≥n original fall√≥:', error.message);
                    }
                } else {
                    console.log('‚ùå Funci√≥n original no disponible');
                }
                
                // Esperar un momento
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // M√©todo 2: Prueba directa
                console.log('\n2Ô∏è‚É£ Probando m√©todo directo...');
                await testBufferFix();
            }
        }
        
    } catch (error) {
        console.error('‚ùå Error en comparaci√≥n:', error);
    }
}

// Exportar funciones
window.testBufferFix = testBufferFix;
window.compareDownloadMethods = compareDownloadMethods;

console.log('‚úÖ Script de prueba cargado');
console.log('üí° Funciones disponibles:');
console.log('   - testBufferFix() - Probar correcci√≥n');
console.log('   - compareDownloadMethods() - Comparar m√©todos');

// Auto-ejecutar prueba
setTimeout(testBufferFix, 1000);