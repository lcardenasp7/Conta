// Script para probar PDF con logo/escudo

console.log('üõ°Ô∏è Probando PDF con logo/escudo...');

async function testPDFWithLogo() {
    console.log('üöÄ PRUEBA PDF CON LOGO');
    console.log('====================');
    
    try {
        const token = localStorage.getItem('token');
        if (!token) {
            console.error('‚ùå No hay token');
            return;
        }
        console.log('üîë Token: ‚úÖ');
        
        const invoicesResponse = await fetch('/api/invoices?limit=1', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (!invoicesResponse.ok) {
            console.error('‚ùå Error facturas:', invoicesResponse.status);
            return;
        }
        
        const invoicesData = await invoicesResponse.json();
        if (!invoicesData.invoices || invoicesData.invoices.length === 0) {
            console.error('‚ùå No hay facturas');
            return;
        }
        
        const invoice = invoicesData.invoices[0];
        console.log('üéØ Factura:', invoice.invoiceNumber);
        
        console.log('\nüì• Generando PDF con logo...');
        
        const startTime = Date.now();
        
        const pdfResponse = await fetch(`/api/invoices/${invoice.id}/pdf`, {
            method: 'GET',
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        const responseTime = Date.now() - startTime;
        
        console.log('‚è±Ô∏è Tiempo:', responseTime, 'ms');
        console.log('üìä Status:', pdfResponse.status);
        console.log('üìä OK:', pdfResponse.ok);
        
        const contentLength = pdfResponse.headers.get('content-length');
        console.log('üìã Content-Length:', contentLength);
        
        if (!pdfResponse.ok) {
            const errorText = await pdfResponse.text();
            console.error('‚ùå Error response:', errorText);
            return;
        }
        
        console.log('\nüì¶ Procesando blob...');
        const blob = await pdfResponse.blob();
        
        console.log('üì¶ Blob size:', blob.size, 'bytes');
        
        // Comparar tama√±o (con logo deber√≠a ser m√°s grande)
        if (blob.size > 5000) {
            console.log('üõ°Ô∏è Tama√±o sugiere que incluye logo (>5KB)');
        } else {
            console.log('‚ö†Ô∏è Tama√±o peque√±o, posible que no incluya logo');
        }
        
        if (blob.size === 0) {
            console.error('‚ùå Blob vac√≠o');
            return;
        }
        
        console.log('\nüíæ Descargando PDF con logo...');
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `CON_LOGO_${invoice.invoiceNumber}.pdf`;
        
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        setTimeout(() => URL.revokeObjectURL(url), 1000);
        
        console.log('\nüéâ PDF CON LOGO DESCARGADO');
        console.log('‚úÖ Verifica que tenga:');
        console.log('   - üõ°Ô∏è Logo/escudo en la esquina superior izquierda');
        console.log('   - üìÑ Informaci√≥n institucional al lado del logo');
        console.log('   - üé® Dise√±o profesional completo');
        console.log('   - üìÑ Una sola p√°gina optimizada');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå ERROR:', error);
        return false;
    }
}

// Funci√≥n para verificar si el logo existe
async function checkLogoAvailability() {
    console.log('üîç Verificando disponibilidad del logo...');
    
    try {
        // Intentar acceder al logo
        const logoResponse = await fetch('/uploads/logo.png');
        
        console.log('üõ°Ô∏è Logo status:', logoResponse.status);
        console.log('üõ°Ô∏è Logo OK:', logoResponse.ok);
        
        if (logoResponse.ok) {
            const logoBlob = await logoResponse.blob();
            console.log('üõ°Ô∏è Logo size:', logoBlob.size, 'bytes');
            console.log('üõ°Ô∏è Logo type:', logoBlob.type);
            
            if (logoBlob.size > 0) {
                console.log('‚úÖ Logo disponible y v√°lido');
                return true;
            } else {
                console.log('‚ö†Ô∏è Logo vac√≠o');
                return false;
            }
        } else {
            console.log('‚ùå Logo no accesible');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Error verificando logo:', error);
        return false;
    }
}

// Funci√≥n para comparar PDFs con y sin logo
async function comparePDFSizes() {
    console.log('üìä Comparando tama√±os de PDF...');
    
    try {
        const token = localStorage.getItem('token');
        const invoicesResponse = await fetch('/api/invoices?limit=1', {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (invoicesResponse.ok) {
            const invoicesData = await invoicesResponse.json();
            if (invoicesData.invoices && invoicesData.invoices.length > 0) {
                const invoice = invoicesData.invoices[0];
                
                console.log('üìÑ Factura:', invoice.invoiceNumber);
                
                // Obtener PDF actual (con logo)
                const pdfResponse = await fetch(`/api/invoices/${invoice.id}/pdf`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (pdfResponse.ok) {
                    const blob = await pdfResponse.blob();
                    console.log('üì¶ Tama√±o con logo:', blob.size, 'bytes');
                    
                    // Estimaciones
                    console.log('üìà Comparaci√≥n estimada:');
                    console.log('   - PDF simple: ~1669 bytes');
                    console.log('   - PDF profesional sin logo: ~3000-4000 bytes');
                    console.log('   - PDF profesional con logo: ~5000+ bytes');
                    console.log('   - Actual:', blob.size, 'bytes');
                    
                    if (blob.size > 5000) {
                        console.log('‚úÖ Tama√±o indica que probablemente incluye logo');
                    } else if (blob.size > 3000) {
                        console.log('‚ö†Ô∏è Tama√±o medio, posible logo peque√±o o sin logo');
                    } else {
                        console.log('‚ùå Tama√±o peque√±o, probablemente sin logo');
                    }
                }
            }
        }
        
    } catch (error) {
        console.error('‚ùå Error comparando:', error);
    }
}

// Exportar funciones
window.testPDFWithLogo = testPDFWithLogo;
window.checkLogoAvailability = checkLogoAvailability;
window.comparePDFSizes = comparePDFSizes;

console.log('‚úÖ Script cargado');
console.log('üí° Funciones:');
console.log('   - testPDFWithLogo() - Probar PDF con logo');
console.log('   - checkLogoAvailability() - Verificar logo');
console.log('   - comparePDFSizes() - Comparar tama√±os');

// Auto-ejecutar verificaciones
setTimeout(() => {
    checkLogoAvailability().then(logoOK => {
        if (logoOK) {
            console.log('üöÄ Logo disponible, probando PDF...');
            setTimeout(testPDFWithLogo, 1000);
        } else {
            console.log('‚ö†Ô∏è Logo no disponible, probando PDF sin logo...');
            setTimeout(testPDFWithLogo, 1000);
        }
    });
}, 1000);