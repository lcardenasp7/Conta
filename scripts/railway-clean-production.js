#!/usr/bin/env node

/**
 * Script para limpiar la base de datos de Railway
 * Elimina todos los datos de prueba y deja solo lo esencial
 */

require('dotenv').config();
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanProductionDatabase() {
    console.log('üßπ LIMPIANDO BASE DE DATOS DE RAILWAY');
    console.log('===================================\n');

    try {
        // 1. Eliminar todos los datos transaccionales
        console.log('üóëÔ∏è Eliminando datos transaccionales...');
        
        await prisma.fundTransaction.deleteMany({});
        console.log('‚úÖ Transacciones de fondos eliminadas');
        
        await prisma.payment.deleteMany({});
        console.log('‚úÖ Pagos eliminados');
        
        await prisma.invoiceItem.deleteMany({});
        console.log('‚úÖ Items de facturas eliminados');
        
        await prisma.invoice.deleteMany({});
        console.log('‚úÖ Facturas eliminadas');
        
        await prisma.eventAssignment.deleteMany({});
        console.log('‚úÖ Asignaciones de eventos eliminadas');
        
        await prisma.event.deleteMany({});
        console.log('‚úÖ Eventos eliminados');
        
        // 2. Resetear fondos (mantener estructura pero sin dinero)
        console.log('\nüí∞ Reseteando fondos...');
        
        await prisma.fund.updateMany({
            data: {
                currentBalance: 0,
                totalIncome: 0,
                totalExpenses: 0,
                balance: 0
            }
        });
        console.log('‚úÖ Saldos de fondos reseteados a $0');
        
        // 3. Eliminar estudiantes de prueba (mantener solo estructura)
        console.log('\nüë• Eliminando estudiantes de prueba...');
        
        const studentCount = await prisma.student.count();
        console.log(`üìä Estudiantes actuales: ${studentCount}`);
        
        if (studentCount > 0) {
            await prisma.student.deleteMany({});
            console.log('‚úÖ Todos los estudiantes eliminados');
        }
        
        // 4. Verificar que solo queden datos esenciales
        console.log('\nüìã VERIFICANDO DATOS RESTANTES...');
        
        const institution = await prisma.institution.count();
        const users = await prisma.user.count();
        const grades = await prisma.grade.count();
        const groups = await prisma.group.count();
        const accounts = await prisma.account.count();
        const funds = await prisma.fund.count();
        
        console.log(`‚úÖ Instituci√≥n: ${institution}`);
        console.log(`‚úÖ Usuarios: ${users}`);
        console.log(`‚úÖ Grados: ${grades}`);
        console.log(`‚úÖ Grupos: ${groups}`);
        console.log(`‚úÖ Cuentas contables: ${accounts}`);
        console.log(`‚úÖ Fondos: ${funds}`);
        
        // 5. Verificar que no hay datos transaccionales
        const invoices = await prisma.invoice.count();
        const payments = await prisma.payment.count();
        const events = await prisma.event.count();
        const students = await prisma.student.count();
        const transactions = await prisma.fundTransaction.count();
        
        console.log(`\nüîç VERIFICACI√ìN DE LIMPIEZA:`);
        console.log(`‚ùå Facturas: ${invoices} (debe ser 0)`);
        console.log(`‚ùå Pagos: ${payments} (debe ser 0)`);
        console.log(`‚ùå Eventos: ${events} (debe ser 0)`);
        console.log(`‚ùå Estudiantes: ${students} (debe ser 0)`);
        console.log(`‚ùå Transacciones: ${transactions} (debe ser 0)`);
        
        if (invoices === 0 && payments === 0 && events === 0 && students === 0 && transactions === 0) {
            console.log('\nüéâ ¬°BASE DE DATOS LIMPIA EXITOSAMENTE!');
            console.log('‚úÖ Solo quedan datos esenciales para producci√≥n');
        } else {
            console.log('\n‚ö†Ô∏è Algunos datos no se eliminaron completamente');
        }
        
        console.log('\nüìã ESTADO FINAL:');
        console.log('================');
        console.log('‚úÖ Instituci√≥n configurada');
        console.log('‚úÖ Usuarios administrativos listos');
        console.log('‚úÖ Estructura acad√©mica preparada');
        console.log('‚úÖ Sistema financiero inicializado');
        console.log('‚úÖ Fondos creados (saldo $0)');
        console.log('‚ùå Sin estudiantes (listos para importar)');
        console.log('‚ùå Sin facturas (sistema limpio)');
        console.log('‚ùå Sin pagos (sistema limpio)');
        console.log('‚ùå Sin eventos (listos para crear)');
        
    } catch (error) {
        console.error('‚ùå Error limpiando base de datos:', error);
        throw error;
    } finally {
        await prisma.$disconnect();
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    cleanProductionDatabase()
        .then(() => {
            console.log('\n‚úÖ Limpieza completada exitosamente');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Error:', error);
            process.exit(1);
        });
}

module.exports = { cleanProductionDatabase };