generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institution {
  id         String   @id @default(uuid())
  name       String
  nit        String   @unique
  address    String
  city       String
  state      String
  locality   String
  phone      String
  email      String
  dane       String   @unique
  resolution String
  levels     String
  title      String
  calendar   String
  schedule   String
  logo       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  password         String
  name             String
  role             UserRole
  isActive         Boolean  @default(true)
  isVerified       Boolean  @default(false)
  lastLogin        DateTime?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relaciones existentes
  events           Event[]
  invoices         Invoice[]
  payments         Payment[]
  transactions     Transaction[]
  
  // NUEVAS RELACIONES para gestión de fondos
  fundTransactions         FundTransaction[]
  performedFundTransactions FundTransaction[] @relation("PerformedTransactions")
  approvedFundTransactions  FundTransaction[] @relation("ApprovedTransactions")
  
  // NUEVAS RELACIONES para préstamos
  approvedFundLoans        FundLoan[]        @relation("ApprovedLoans")
  requestedFundLoans       FundLoan[]        @relation("RequestedLoans")
  
  // NUEVAS RELACIONES para alertas
  readAlerts               FundAlert[]
}

model Student {
  id               String            @id @default(uuid())
  documentType     DocumentType
  document         String            @unique
  firstName        String
  lastName         String
  birthDate        DateTime
  gender           Gender
  email            String?
  phone            String?
  address          String
  gradeId          String
  groupId          String
  guardianName     String?
  guardianPhone    String?
  status           StudentStatus     @default(ACTIVE)
  enrollmentDate   DateTime          @default(now())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  attendances      Attendance[]
  enrollments      Enrollment[]
  eventAssignments EventAssignment[]
  invoices         Invoice[]
  payments         Payment[]
  grade            Grade             @relation(fields: [gradeId], references: [id])
  group            Group             @relation(fields: [groupId], references: [id])
}

model Grade {
  id        String    @id @default(uuid())
  name      String
  level     String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  groups    Group[]
  students  Student[]
}

model Group {
  id          String    @id @default(uuid())
  name        String
  gradeId     String
  capacity    Int       @default(30)
  teacherName String?
  classroom   String?
  year        Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  grade       Grade     @relation(fields: [gradeId], references: [id])
  students    Student[]
}

model Enrollment {
  id         String           @id @default(uuid())
  studentId  String
  year       Int?
  gradeId    String
  groupId    String
  status     EnrollmentStatus @default(ACTIVE)
  enrollDate DateTime         @default(now())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  student    Student          @relation(fields: [studentId], references: [id])
}

model Event {
  id              String              @id @default(uuid())
  name            String
  type            EventType
  description     String?
  eventDate       DateTime
  location        String?
  ticketPrice     Float               @default(0)
  fundraisingGoal Float               @default(0)
  totalRaised     Float               @default(0)
  responsible     String
  responsibleId   String
  status          EventStatus         @default(PLANNING)
  targetGrades    String?
  targetGroups    String?
  assignmentType  EventAssignmentType @default(MANUAL)
  
  // NUEVO: Gestión de fondos
  fundId          String?
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relaciones existentes
  user            User                @relation(fields: [responsibleId], references: [id])
  assignments     EventAssignment[]
  payments        Payment[]
  
  // NUEVAS RELACIONES para gestión de fondos
  fund            Fund?               @relation("EventFund", fields: [fundId], references: [id])
  fundTransactions FundTransaction[]
  
  @@index([fundId])
}

model EventAssignment {
  id              String   @id @default(uuid())
  eventId         String
  studentId       String
  ticketsAssigned Int      @default(0)
  ticketsSold     Int      @default(0)
  amountRaised    Float    @default(0)
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  event           Event    @relation(fields: [eventId], references: [id])
  student         Student  @relation(fields: [studentId], references: [id])

  @@unique([eventId, studentId])
}

model Account {
  id          String        @id @default(uuid())
  code        String        @unique
  name        String
  type        AccountType
  category    String
  parent      String?
  description String?
  isActive    Boolean       @default(true)
  balance     Float         @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  credits     Transaction[] @relation("CreditAccount")
  debits      Transaction[] @relation("DebitAccount")
}

model Transaction {
  id              String            @id @default(uuid())
  date            DateTime
  documentNumber  String            @unique
  description     String
  debitAccountId  String
  creditAccountId String
  amount          Float
  reference       String?
  userId          String
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  creditAccount   Account           @relation("CreditAccount", fields: [creditAccountId], references: [id])
  debitAccount    Account           @relation("DebitAccount", fields: [debitAccountId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
}

model Invoice {
  id               String            @id @default(uuid())
  invoiceNumber    String            @unique
  date             DateTime          @default(now())
  dueDate          DateTime
  studentId        String?
  concept          InvoiceConcept
  subtotal         Float             @default(0)
  tax              Float             @default(0)
  total            Float
  status           InvoiceStatus     @default(PENDING)
  observations     String?
  userId           String
  isExternal       Boolean           @default(false)
  clientName       String?
  clientDocument   String?
  clientEmail      String?
  clientPhone      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // NUEVO: Gestión de fondos
  fundSourceId     String?    // Para gastos: de qué fondo sale el dinero
  
  supplierAddress  String?
  supplierDocument String?
  supplierEmail    String?
  supplierName     String?
  supplierPhone    String?
  type             InvoiceType       @default(OUTGOING)
  
  // Relaciones existentes
  student          Student?          @relation(fields: [studentId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  items            InvoiceItem[]
  payments         Payment[]
  
  // NUEVAS RELACIONES para gestión de fondos
  fundSource       Fund?             @relation("FundExpenseSource", fields: [fundSourceId], references: [id])
  fundTransactions FundTransaction[]

  @@index([fundSourceId])
}

model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String            @id @default(uuid())
  paymentNumber   String            @unique
  date            DateTime
  studentId       String?           // CORREGIDO: Opcional para facturas externas
  invoiceId       String?
  eventId         String?
  amount          Float
  method          PaymentMethod
  reference       String?
  observations    String?
  userId          String
  status          PaymentStatus     @default(COMPLETED)
  
  // NUEVO: Gestión de fondos
  fundTargetId    String?    // Para ingresos: a qué fondo va el dinero
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relaciones existentes
  event           Event?            @relation(fields: [eventId], references: [id])
  invoice         Invoice?          @relation(fields: [invoiceId], references: [id])
  student         Student?          @relation(fields: [studentId], references: [id]) // CORREGIDO: Opcional
  user            User              @relation(fields: [userId], references: [id])
  
  // NUEVAS RELACIONES para gestión de fondos
  fundTarget      Fund?             @relation("FundTargetPayments", fields: [fundTargetId], references: [id])
  fundTransactions FundTransaction[]
  
  @@index([fundTargetId])
}

model Attendance {
  id        String           @id @default(uuid())
  studentId String
  date      DateTime
  status    AttendanceStatus
  notes     String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  student   Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  entity    String
  entityId  String
  oldData   Json?
  newData   Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
}

// ==========================================
// MODELOS COMPLETOS PARA GESTIÓN DE FONDOS Y TRAZABILIDAD
// ==========================================

model Fund {
  id              String      @id @default(uuid())
  name            String      // "Eventos 2024", "Matrículas 2024", etc.
  code            String      @unique // "EVE2024", "MAT2024", etc.
  type            FundType
  description     String?
  isActive        Boolean     @default(true)
  
  // Saldos y balances
  currentBalance  Float       @default(0)
  totalIncome     Float       @default(0)
  totalExpenses   Float       @default(0)
  initialBalance  Float       @default(0)
  
  // Configuración de alertas - NUEVO
  alertLevel1     Float       @default(70.0)   // 70%
  alertLevel2     Float       @default(85.0)   // 85%
  alertLevel3     Float       @default(95.0)   // 95%
  
  // Metadatos
  eventId         String?     // Si es fondo de evento específico
  academicYear    Int?        // Año académico
  
  // Campo mantenido para compatibilidad
  balance         Float       @default(0)        
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relaciones
  transactions    FundTransaction[]
  payments        Payment[]   @relation("FundTargetPayments")
  events          Event[]     @relation("EventFund")
  expenseInvoices Invoice[]   @relation("FundExpenseSource")
  
  // NUEVAS RELACIONES para préstamos
  lentLoans       FundLoan[]  @relation("LenderFund")
  borrowedLoans   FundLoan[]  @relation("BorrowerFund")
  
  // NUEVAS RELACIONES para alertas
  alerts          FundAlert[]
  
  // Índices actualizados
  @@index([eventId])
  @@index([type, isActive])
  @@index([academicYear])
}

model FundTransaction {
  id              String              @id @default(uuid())
  fundId          String
  type            FundTransactionType
  amount          Float
  description     String
  
  // Referencias existentes mantenidas
  reference       String?
  invoiceId       String?
  paymentId       String?
  userId          String
  balanceAfter    Float
  
  // NUEVOS CAMPOS para transferencias entre fondos
  sourceFundId    String?
  targetFundId    String?
  
  // NUEVOS CAMPOS para control y aprobaciones
  performedBy     String              // Usuario que realizó la transacción
  approvedBy      String?             // Usuario que aprobó (si aplica)
  isApproved      Boolean            @default(true)
  
  // Referencias a eventos - NUEVO
  eventId         String?
  
  // NUEVO: Para préstamos
  fundLoanId      String?
  
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  // Relaciones existentes mantenidas
  fund            Fund               @relation(fields: [fundId], references: [id])
  invoice         Invoice?           @relation(fields: [invoiceId], references: [id])
  payment         Payment?           @relation(fields: [paymentId], references: [id])
  user            User               @relation(fields: [userId], references: [id])
  
  // NUEVAS RELACIONES
  event           Event?             @relation(fields: [eventId], references: [id])
  performer       User               @relation("PerformedTransactions", fields: [performedBy], references: [id])
  approver        User?              @relation("ApprovedTransactions", fields: [approvedBy], references: [id])
  fundLoan        FundLoan?          @relation(fields: [fundLoanId], references: [id])
  
  // Índices actualizados
  @@index([fundId, createdAt])
  @@index([invoiceId])
  @@index([paymentId])
  @@index([type, createdAt])
  @@index([eventId])
  @@index([performedBy])
  @@index([fundLoanId])
}

// MODELO NUEVO: PRÉSTAMOS ENTRE FONDOS
model FundLoan {
  id              String              @id @default(uuid())
  lenderFundId    String              // Fondo que presta
  borrowerFundId  String              // Fondo que recibe
  amount          Float               // Monto del préstamo
  reason          String              // Motivo del préstamo
  
  // Control de aprobaciones
  requestedBy     String              // Usuario que solicita
  approvedBy      String?             // Usuario que aprueba (rector para >$1,000,000)
  status          LoanStatus          @default(PENDING)
  
  // Fechas importantes
  requestDate     DateTime            @default(now())
  approvalDate    DateTime?
  dueDate         DateTime            // Fecha límite de devolución
  
  // Seguimiento del préstamo
  totalRepaid     Float               @default(0)
  pendingAmount   Float               // Se calcula: amount - totalRepaid
  isFullyRepaid   Boolean             @default(false)
  
  // Metadatos
  observations    String?
  
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relaciones
  lenderFund      Fund                @relation("LenderFund", fields: [lenderFundId], references: [id])
  borrowerFund    Fund                @relation("BorrowerFund", fields: [borrowerFundId], references: [id])
  requester       User                @relation("RequestedLoans", fields: [requestedBy], references: [id])
  approver        User?               @relation("ApprovedLoans", fields: [approvedBy], references: [id])
  
  // Transacciones relacionadas con este préstamo
  transactions    FundTransaction[]
  
  // Índices
  @@index([lenderFundId])
  @@index([borrowerFundId])
  @@index([status])
  @@index([dueDate])
  @@index([requestedBy])
}

// MODELO NUEVO: ALERTAS DE FONDOS
model FundAlert {
  id              String              @id @default(uuid())
  fundId          String
  alertType       FundAlertType
  level           Int                 // 1, 2, o 3 (70%, 85%, 95%)
  percentage      Float               // Porcentaje de uso actual
  currentBalance  Float               // Saldo actual cuando se disparó
  message         String              // Mensaje de la alerta
  
  // Control de estado
  isActive        Boolean             @default(true)
  isRead          Boolean             @default(false)
  readBy          String?             // Usuario que marcó como leída
  readAt          DateTime?
  
  // Metadatos
  triggeredAt     DateTime            @default(now())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relaciones
  fund            Fund                @relation(fields: [fundId], references: [id])
  reader          User?               @relation(fields: [readBy], references: [id])
  
  // Índices
  @@index([fundId, isActive])
  @@index([isRead])
  @@index([triggeredAt])
}

// ==========================================
// ENUMS ACTUALIZADOS Y NUEVOS
// ==========================================

enum UserRole {
  RECTOR
  SECRETARY
  TEACHER
  AUXILIARY_ACCOUNTANT
  ACCOUNTANT
  ADMIN
}

enum DocumentType {
  TI
  RC
  CC
  CE
  PP
}

enum Gender {
  M
  F
  O
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  TRANSFERRED
  SUSPENDED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  TRANSFERRED
}

enum EventType {
  RAFFLE
  BINGO
  GRADUATION
  FESTIVAL
  SPORTS
  CULTURAL
  FUNDRAISING
  OTHER
  GRADUATION_FEE
}

enum EventStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum EventAssignmentType {
  MANUAL
  BY_GRADE
  BY_GROUP
  MIXED
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  EXPENSE
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum InvoiceType {
  OUTGOING
  INCOMING
}

enum InvoiceConcept {
  TUITION
  MONTHLY
  EVENT
  UNIFORM
  BOOKS
  TRANSPORT
  CAFETERIA
  OTHER
  OFFICE_SUPPLIES
  MAINTENANCE
  UTILITIES
  PROFESSIONAL_SERVICES
  EQUIPMENT
  CLEANING_SUPPLIES
  FOOD_SUPPLIES
  EDUCATIONAL_MATERIALS
  TECHNOLOGY
  INSURANCE
  RENT
}

enum InvoiceStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CARD
  CHECK
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

// ENUM EXPANDIDO para tipos de fondos más específicos
enum FundType {
  EVENTS          // Fondos de eventos
  TUITION         // Fondos de matrículas  
  MONTHLY_FEES    // Fondos de mensualidades
  EXTERNAL        // Fondos externos
  OPERATIONAL     // Fondos operacionales
  EMERGENCY       // Fondos de emergencia
  
  // Mantener valores existentes por compatibilidad
  GENERAL         // Mapear a OPERATIONAL
  EVENT           // Mapear a EVENTS
  MONTHLY         // Mapear a MONTHLY_FEES
  DONATION        // Mapear a EXTERNAL
  OTHER           // Mapear a OPERATIONAL
}

// ENUM EXPANDIDO para tipos de transacciones
enum FundTransactionType {
  INCOME          // Ingreso al fondo
  EXPENSE         // Gasto del fondo
  TRANSFER_IN     // Transferencia entrante
  TRANSFER_OUT    // Transferencia saliente
  ADJUSTMENT      // Ajuste manual
  LOAN_DISBURSED  // Préstamo otorgado
  LOAN_RECEIVED   // Préstamo recibido
  LOAN_REPAYMENT  // Pago de préstamo
}

// NUEVO: Estados de préstamos
enum LoanStatus {
  PENDING         // Pendiente de aprobación
  APPROVED        // Aprobado
  DISBURSED       // Desembolsado
  REPAYING        // En proceso de pago
  FULLY_REPAID    // Completamente pagado
  OVERDUE         // Vencido
  CANCELLED       // Cancelado
}

// NUEVO: Tipos de alertas
enum FundAlertType {
  USAGE_WARNING   // Alerta de uso (70%, 85%, 95%)
  LOW_BALANCE     // Saldo bajo
  LOAN_DUE        // Préstamo por vencer
  LOAN_OVERDUE    // Préstamo vencido
  TRANSFER_LARGE  // Transferencia grande
}